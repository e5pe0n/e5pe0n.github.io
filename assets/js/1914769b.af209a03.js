"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[5710],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),l=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=l(n),f=a,m=c["".concat(o,".").concat(f)]||c[f]||d[f]||i;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=f;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u[c]="string"==typeof e?e:a,s[1]=u;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2744:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>l});var r=n(8957),a=(n(9496),n(9613));const i={},s="Traits",u={unversionedId:"coding/rust/traits",id:"coding/rust/traits",title:"Traits",description:"Generics vs. Associated Types",source:"@site/docs/coding/rust/traits.md",sourceDirName:"coding/rust",slug:"/coding/rust/traits",permalink:"/docs/coding/rust/traits",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"techNoteSidebar",previous:{title:"Strings",permalink:"/docs/coding/rust/strings"},next:{title:"Misc",permalink:"/docs/category/misc"}},o={},l=[{value:"Generics vs. Associated Types",id:"generics-vs-associated-types",level:2}],p={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"traits"},"Traits"),(0,a.kt)("h2",{id:"generics-vs-associated-types"},"Generics vs. Associated Types"),(0,a.kt)("p",null,"use associated type to bind a type to a trait implementation; get the type uniquely determined by the trait implementation."),(0,a.kt)("p",null,"e.g."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/nightly/std/ops/trait.Add.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Add")," trait")," binds ",(0,a.kt)("inlineCode",{parentName:"p"},"Output")," type to a trait implementation so that when a ",(0,a.kt)("inlineCode",{parentName:"p"},"RHS")," type is given then can determine the return type of ",(0,a.kt)("inlineCode",{parentName:"p"},"add()")," uniquely."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Add<RHS = Self> {\n    type Output;  // associated type\n    \n    fn add(self, rhs: RHS) -> Self::Output;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Add<u32> for u32 {\n    type Output = u32;\n    \n    fn add(self, rhs: u32) -> u32 {\n      // [...]\n    }\n}\n\nimpl Add<&u32> for u32 {\n    type Output = u32;\n    \n    fn add(self, rhs: &u32) -> u32 {\n      // [...]\n    }\n}\n// let result: u32 = 1u32 + 1u32\n// let result: u32 = 1u32 + &1u32\n")),(0,a.kt)("p",null,"if ",(0,a.kt)("inlineCode",{parentName:"p"},"Output")," is generics instead of associated type like below,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Add<RHS = Self, Output> {\n    fn add(self, rhs: RHS) -> Output;\n}\n")),(0,a.kt)("p",null,"we can get implementations for ",(0,a.kt)("inlineCode",{parentName:"p"},"RHS"),", which could result in multiple result types.\nusing associated type disallows to do so."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Add<u32, u32> for u32 {\n    fn add(self, rhs: u32) -> u32 {\n      // [...]\n    }\n}\n\nimpl Add<u32, &u32> for u32 {\n    fn add(self, rhs: u32) -> &u32 {\n        // [...]\n    }\n}\n// let result: u32 = 1u32 + 1u32\n// let result: &u32 = 1u32 + 1u32\n")))}d.isMDXComponent=!0}}]);