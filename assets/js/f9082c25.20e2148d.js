"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[7850],{7603:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>_,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"algorithms/bit-manipulation","title":"Bit Manipulation","description":"","source":"@site/docs/algorithms/bit-manipulation.md","sourceDirName":"algorithms","slug":"/algorithms/bit-manipulation","permalink":"/docs/algorithms/bit-manipulation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"techNoteSidebar","previous":{"title":"Algorithms","permalink":"/docs/category/algorithms"},"next":{"title":"Flow Networks","permalink":"/docs/algorithms/flow-algorithms"}}');var s=e(6070),r=e(5248);const l={},o="Bit Manipulation",a={},u=[];function c(t){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,r.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"bit-manipulation",children:"Bit Manipulation"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="C++"',children:'#include <bitset>\n#include <string>\nusing namespace std;\nusing ll = long long;\n\nbool get_bit(ll n, ll i) {\n  return (n & (1LL << i)) != 0;\n}\n\nll set_bit(ll n, ll i) {\n  return n | (1LL << i);\n}\n\nll toggle_bit(ll n, ll i) {\n  return n ^ (1LL << i);\n}\n\nll clear_bit(ll n, ll i) {\n  ll mask = ~(1LL << i);\n  return n & mask;\n}\n\nll clear_bits_msb_though_i(ll n, ll i) {\n  ll mask = (1LL << i) - 1;\n  return n & mask;\n}\n\nll clear_bits_i_through_0(ll n, ll i) {\n  ll mask = -1LL << (i + 1);\n  return n & mask;\n}\n\nll update_bit(ll n, ll i, bool i_th_bit) {\n  ll mask = ~(1LL << i);\n  return (n & mask) | (i_th_bit << i);\n}\n\nint main() {\n  ll n = 7;\n  bitset<4> before(n);\n\n  bitset<4> b(get_bit(n, 2));\n  puts(before.to_string().c_str()); // 0111\n  printf("%d\\n", get_bit(n, 2));    // 1\n  puts("");\n\n  bitset<4> after1(set_bit(n, 3));\n  puts(before.to_string().c_str()); // 0111\n  puts(after1.to_string().c_str()); // 1111\n  puts("");\n\n  bitset<4> after2(toggle_bit(n, 1));\n  puts(before.to_string().c_str()); // 0111\n  puts(after2.to_string().c_str()); // 0101\n  puts("");\n\n  bitset<4> after3(clear_bit(n, 1));\n  puts(before.to_string().c_str()); // 0111\n  puts(after3.to_string().c_str()); // 0101\n  puts("");\n\n  bitset<4> after4(clear_bits_msb_though_i(n, 2));\n  puts(before.to_string().c_str()); // 0111\n  puts(after4.to_string().c_str()); // 0011\n  puts("");\n\n  bitset<4> after5(clear_bits_i_through_0(n, 1));\n  puts(before.to_string().c_str()); // 0111\n  puts(after5.to_string().c_str()); // 0100\n  puts("");\n\n  bitset<4> after6(update_bit(n, 1, 0));\n  puts(before.to_string().c_str()); // 0111\n  puts(after6.to_string().c_str()); // 0101\n  puts("");\n}\n'})})]})}function _(t={}){const{wrapper:n}={...(0,r.R)(),...t.components};return n?(0,s.jsx)(n,{...t,children:(0,s.jsx)(c,{...t})}):c(t)}},5248:(t,n,e)=>{e.d(n,{R:()=>l,x:()=>o});var i=e(758);const s={},r=i.createContext(s);function l(t){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:l(t.components),i.createElement(r.Provider,{value:n},t.children)}}}]);