"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[1752],{1151:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"coding/c++/fundamentals","title":"Fundamentals","description":"Vector","source":"@site/docs/coding/c++/fundamentals.md","sourceDirName":"coding/c++","slug":"/coding/c++/fundamentals","permalink":"/docs/coding/c++/fundamentals","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"techNoteSidebar","previous":{"title":"C++","permalink":"/docs/category/c"},"next":{"title":"Haskell","permalink":"/docs/category/haskell"}}');var i=t(6070),l=t(5248);const c={},d="Fundamentals",r={},a=[{value:"Vector",id:"vector",level:2},{value:"Copy and Reference",id:"copy-and-reference",level:3},{value:"Vector of Pointers",id:"vector-of-pointers",level:3},{value:"Sort",id:"sort",level:3},{value:"Asc",id:"asc",level:4},{value:"Dsc",id:"dsc",level:4},{value:"Priority Queue",id:"priority-queue",level:2},{value:"Max Heap",id:"max-heap",level:3},{value:"Min Heap",id:"min-heap",level:3},{value:"Dynamic Cast",id:"dynamic-cast",level:2},{value:"Down Cast",id:"down-cast",level:3},{value:"XOR",id:"xor",level:2},{value:"Random",id:"random",level:2},{value:"Read Lines",id:"read-lines",level:2}];function o(n){const e={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"fundamentals",children:"Fundamentals"})}),"\n",(0,i.jsx)(e.h2,{id:"vector",children:"Vector"}),"\n",(0,i.jsx)(e.h3,{id:"copy-and-reference",children:"Copy and Reference"}),"\n",(0,i.jsxs)(e.p,{children:["C++'s function returns copied vector with ",(0,i.jsx)(e.strong,{children:"copied objects"})," it has."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <string>\n#include <vector>\nusing namespace std;\n\nstruct Node {\n  int id;\n  Node(int _id) : id(_id) {}\n};\n\nstruct Graph {\n  vector<Node> nodes;\n  vector<Node> get_nodes() {\n    return nodes;\n  }\n};\n\nint main() {\n  Graph g;\n  g.nodes.push_back(Node(0));\n  vector<Node> _nodes = g.get_nodes();\n  _nodes[0].id = 100;\n  printf("%d\\n", g.nodes[0].id); // 0\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Use pointer with ",(0,i.jsx)(e.em,{children:"shared_ptr"})," in ",(0,i.jsx)(e.code,{children:"<memory>"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <memory>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstruct Node {\n  int id;\n  Node(int _id) : id(_id) {}\n};\n\nstruct Graph {\n  vector<shared_ptr<Node>> nodes;\n  vector<shared_ptr<Node>> get_nodes() {\n    return nodes;\n  }\n};\n\nint main() {\n  Graph g;\n  g.nodes.push_back(make_shared<Node>(0));\n  vector<shared_ptr<Node>> _nodes = g.get_nodes();\n  _nodes[0].get()->id = 100;\n  printf("%d\\n", g.nodes[0].get()->id); // 100\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"vector-of-pointers",children:"Vector of Pointers"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.em,{children:"vector"})," does not clean pointers when it reaches out of the scope."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <string>\n#include <vector>\nusing namespace std;\n\nstruct A {\n  ~A() {\n    printf("deleted");\n  }\n};\n\nint main() {\n  vector<A *> v;\n  v.emplace_back(new A);\n} // memory leaks (~A is not called)\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Use ",(0,i.jsx)(e.em,{children:"unique_ptr"})," or ",(0,i.jsx)(e.em,{children:"shared_ptr"})," in ",(0,i.jsx)(e.code,{children:"<memory>"})," to make memory maintenace easy."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <memory>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstruct A {\n  ~A() {\n    printf("deleted\\n");\n  }\n};\n\nint main() {\n  vector<unique_ptr<A>> v;\n  v.emplace_back(unique_ptr<A>(new A));\n  v.emplace_back(make_unique<A>()); // the same as above\n}\n// deleted (~A is called)\n// deleted (~A is called)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"sort",children:"Sort"}),"\n",(0,i.jsx)(e.h4,{id:"asc",children:"Asc"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="Using lambda"',children:'#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n  vector<ll> V{1, 5, 3};\n  auto cmp_asc = [](const ll &left, const ll &right) { return left < right; };\n  sort(V.begin(), V.end(), cmp_asc);\n  for (auto v : V)\n    printf("%lld\\n", v); // 1 3 5\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="Using the less comparison function"',children:'#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n  vector<ll> V{1, 5, 3};\n  sort(V.begin(), V.end(), less<ll>());\n  for (auto v : V)\n    printf("%lld\\n", v); // 1 3 5\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"dsc",children:"Dsc"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="Using lambda"',children:'#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n  vector<ll> V{1, 5, 3};\n  auto cmp_dsc = [](const ll &left, const ll &right) { return left > right; };\n  sort(V.begin(), V.end(), cmp_dsc);\n  for (auto v : V)\n    printf("%lld\\n", v); // 5 3 1\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="Using the greater comparison function"',children:'#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n  vector<ll> V{1, 5, 3};\n  sort(V.begin(), V.end(), greater<ll>());\n  for (auto v : V)\n    printf("%lld\\n", v); // 5 3 1\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"priority-queue",children:"Priority Queue"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"the order of priority_queue is reverse to one of sort!"})}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{style:{textAlign:"center"},children:"functions"}),(0,i.jsx)(e.th,{style:{textAlign:"center"},children:"priority_queue"}),(0,i.jsx)(e.th,{style:{textAlign:"center"},children:"sort"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"center"},children:"greater"}),(0,i.jsx)(e.td,{style:{textAlign:"center"},children:"min heap i.e. asc"}),(0,i.jsx)(e.td,{style:{textAlign:"center"},children:"dsc"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"center"},children:"less"}),(0,i.jsx)(e.td,{style:{textAlign:"center"},children:"max heap i.e. dsc"}),(0,i.jsx)(e.td,{style:{textAlign:"center"},children:"asc"})]})]})]}),"\n",(0,i.jsx)(e.h3,{id:"max-heap",children:"Max Heap"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n  priority_queue<ll> q; // default is MAX heap\n  q.push(1);\n  q.push(5);\n  q.push(3);\n  while (q.size()) {\n    ll p = q.top();\n    q.pop();\n    printf("%lld\\n", p); // 5 3 1\n  }\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nstruct Edge {\n  ll u, v, w;\n};\n\nint main() {\n  auto cmp = [](const Edge &e1, const Edge &e2) { return e1.w < e2.w; };\n  priority_queue<Edge, vector<Edge>, decltype(cmp)> q(cmp);\n  q.push(Edge{0, 1, 1});\n  q.push(Edge{0, 2, 5});\n  q.push(Edge{1, 2, 3});\n  while (q.size()) {\n    Edge e = q.top();\n    q.pop();\n    printf("%lld\\n", e.w); // 5 3 1\n  }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"min-heap",children:"Min Heap"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n  priority_queue<ll, vector<ll>, greater<vector<ll>::value_type>> q;\n  q.push(1);\n  q.push(5);\n  q.push(3);\n  while (q.size()) {\n    ll p = q.top();\n    q.pop();\n    printf("%lld\\n", p); // 1 3 5\n  }\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nstruct Edge {\n  ll u, v, w;\n};\n\nint main() {\n  auto cmp = [](const Edge &e1, const Edge &e2) { return e1.w > e2.w; };\n  priority_queue<Edge, vector<Edge>, decltype(cmp)> q(cmp);\n  q.push(Edge{0, 1, 1});\n  q.push(Edge{0, 2, 5});\n  q.push(Edge{1, 2, 3});\n  while (q.size()) {\n    Edge e = q.top();\n    q.pop();\n    printf("%lld\\n", e.w); // 1 3 5\n  }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"dynamic-cast",children:"Dynamic Cast"}),"\n",(0,i.jsx)(e.h3,{id:"down-cast",children:"Down Cast"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nstruct A {\n  virtual void dummy() = 0;\n};\n\nstruct B : public A {\n  string _name;\n  void dummy() override {}\n  B(string name) : _name(name) {}\n};\n\nstruct C : public A {\n  ll _value;\n  void dummy() override {}\n  C(ll value) : _value(value) {}\n};\n\nint main() {\n  vector<shared_ptr<A>> v;\n  v.push_back(make_shared<B>("B"));\n  v.push_back(make_shared<C>(3));\n  for (auto _v : v) {\n    if (auto b = dynamic_cast<B *>(_v.get())) {\n      cout << b->_name << endl;\n    } else if (auto c = dynamic_cast<C *>(_v.get())) {\n      cout << c->_value << endl;\n    }\n  }\n}\n\n// B\n// 3\n'})}),"\n",(0,i.jsx)(e.h2,{id:"xor",children:"XOR"}),"\n",(0,i.jsxs)(e.p,{children:["Be careful for the operation precedence.",(0,i.jsx)(e.br,{}),"\n","Should write it with parentheses if not sure."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"3 ^ 6 == 3    // true because evaluated as 3 ^ (6 == 3)\n(3 ^ 6) == 3  // false\n"})}),"\n",(0,i.jsx)(e.h2,{id:"random",children:"Random"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef chrono::high_resolution_clock hrc;\n\nauto seed = hrc::now().time_since_epoch().count();\ndefault_random_engine generator(seed);\nuniform_int_distribution<ll> distribution(1, 6);  // 1, 2, 3, 4, 5, 6\nll x = distribution(generator);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"read-lines",children:"Read Lines"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-txt",metastring:'title="01.txt"',children:"line1-1 line1-2 line1-3\nline2-1 line2-2 line2-3\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'#include <fstream>\n#include <string>\nusing namespace std;\nint main() {\n  ifstream ifs{"01.txt"};\n  string lines{};\n  for (string s; getline(ifs, s);) {\n    lines += s;\n  }\n// line1-1 line1-2 line1-3\n// line2-1 line2-2 line2-3\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},5248:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>d});var s=t(758);const i={},l=s.createContext(i);function c(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:c(n.components),s.createElement(l.Provider,{value:e},n.children)}}}]);