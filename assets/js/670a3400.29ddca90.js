"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[704],{9613:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(9496);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(a),c=i,h=u["".concat(p,".").concat(c)]||u[c]||k[c]||r;return a?n.createElement(h,l(l({ref:t},m),{},{components:a})):n.createElement(h,l({ref:t},m))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6580:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(8957),i=(a(9496),a(9613));const r={title:"Log: 202209"},l=void 0,o={permalink:"/blog/2022/09/24/202209_Log",source:"@site/blog/2022-09-24-202209_Log.md",title:"Log: 202209",description:"Achievement",date:"2022-09-24T00:00:00.000Z",formattedDate:"2022\u5e749\u670824\u65e5",tags:[],readingTime:6.955,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Log: 202209"},prevItem:{title:"Log: 202210",permalink:"/blog/2022/10/30/202210_Log"},nextItem:{title:"Log: 202208",permalink:"/blog/2022/08/28/202208_Log"}},p={authorsImageUrls:[]},s=[{value:"Achievement",id:"achievement",level:2},{value:"In Progreess",id:"in-progreess",level:2},{value:"Stack",id:"stack",level:2},{value:"Music",id:"music",level:2}],m={toc:s},u="wrapper";function k(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"achievement"},"Achievement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Fluent Python (2nd ed.)")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read all! (about 1000 pages)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"this was really interesting book"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"writing about python from the various perspective",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"comparing with other languages"),(0,i.kt)("li",{parentName:"ul"},"applying various design patterns"),(0,i.kt)("li",{parentName:"ul"},"why python choose this syntax and language features, or why python doesn't do"))),(0,i.kt)("li",{parentName:"ul"},"i could learn a lot of general language features, design patterns, architectures and the way to solve problems along with python's language philosophy"),(0,i.kt)("li",{parentName:"ul"},"reviewing the language from only one point of view is poor thinking",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"there are a lot of fields where the language is used"))),(0,i.kt)("li",{parentName:"ul"},"along with ",(0,i.kt)("em",{parentName:"li"},"Essentials of Programming Languages"),", i knew that how python make it simple and easy to use by hiding low layer implementation such as pointers, treatment of strings, and resource management"),(0,i.kt)("li",{parentName:"ul"},"how easy to use string in python",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"default utf-8 encoding, slice"))),(0,i.kt)("li",{parentName:"ul"},"one of the most my favarite point is the syntax to create ",(0,i.kt)("em",{parentName:"li"},"list")," and ",(0,i.kt)("em",{parentName:"li"},"dict"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[1, 2, 3]")," and ",(0,i.kt)("inlineCode",{parentName:"li"},'{"x": 1, "y": 2}')," are almost diagrams"),(0,i.kt)("li",{parentName:"ul"},"to realize what data is, we just look at it, never read it"),(0,i.kt)("li",{parentName:"ul"},"perceivability > readability"))),(0,i.kt)("li",{parentName:"ul"},"after all, completely covering python code with type hints is reckless",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"some packages, even pervasive ones, don't offer types enough"),(0,i.kt)("li",{parentName:"ul"},"errors of mypy and pylance are too annoying"),(0,i.kt)("li",{parentName:"ul"},"personally i want to stop using mypy",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"annotate types every parameters and returns, even it's apparent, are bother; optional typing is best choice"),(0,i.kt)("li",{parentName:"ul"},"even variable name, docstring and comments are sufficient to give information of what data is"),(0,i.kt)("li",{parentName:"ul"},"forcing static typing may kill some advantage of python as dynamic language"))))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"learned"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"decorator using ",(0,i.kt)("em",{parentName:"li"},"class")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"__call__()")),(0,i.kt)("li",{parentName:"ul"},"explicit use ",(0,i.kt)("em",{parentName:"li"},"TypeAlias")),(0,i.kt)("li",{parentName:"ul"},"function singleddispatch"),(0,i.kt)("li",{parentName:"ul"},"typeings python supports",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"duck typing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"avoiding ",(0,i.kt)("inlineCode",{parentName:"li"},"isinstance()")),(0,i.kt)("li",{parentName:"ul"},"using ",(0,i.kt)("em",{parentName:"li"},"try-catch")," (",(0,i.kt)("em",{parentName:"li"},"EAFP"),"; easier to ask for forgiveness than permission)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"<-> ",(0,i.kt)("em",{parentName:"li"},"LBYL"),"; look before you leap"),(0,i.kt)("li",{parentName:"ul"},"hmm i don't like this style lol"),(0,i.kt)("li",{parentName:"ul"},"but it seems that this style has advantage at concurrent programming"))))),(0,i.kt)("li",{parentName:"ul"},"goose typing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"using ",(0,i.kt)("inlineCode",{parentName:"li"},"isinstance()")))),(0,i.kt)("li",{parentName:"ul"},"static typing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mypy"))),(0,i.kt)("li",{parentName:"ul"},"static duck typing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"protocol"),"s"))))),(0,i.kt)("li",{parentName:"ul"},"favor ",(0,i.kt)("em",{parentName:"li"},"object composition")," over ",(0,i.kt)("em",{parentName:"li"},"class inheritance"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this was also said by ",(0,i.kt)("em",{parentName:"li"},"JavaScript: The Definitive Guide")))),(0,i.kt)("li",{parentName:"ul"},"variance rules of thumb",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"if a formal type parameter defines a type for data that goes into the object after its initial construction, it can be ",(0,i.kt)("em",{parentName:"li"},"contravariant")," (strict)"),(0,i.kt)("li",{parentName:"ul"},"if a formal type parameter defines a type for data that comes out of the object, it can be ",(0,i.kt)("em",{parentName:"li"},"covariant")," (lenient)"),(0,i.kt)("li",{parentName:"ul"},"e.g. given ",(0,i.kt)("inlineCode",{parentName:"li"},"Callable[[ParamType, ...], ReturnType]"),", each ",(0,i.kt)("em",{parentName:"li"},"ParamType")," is contravariant and ",(0,i.kt)("em",{parentName:"li"},"ReturnType")," is covariant"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"with")," statement",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"It\u2019s like factoring out the filling in a sandwich: using tuna with different breads. But what if you want to factor out the bread, to make sandwiches with wheat bread, using a different filling each time? That\u2019s what the with statement offers."))))),(0,i.kt)("li",{parentName:"ul"},"python doesn't implement tail recursion optimization (PTC; proper tail calls)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"Personally, I think it is a fine feature for some languages, but I don\u2019t think it fits Python: the elimination of stack traces for some calls but not others would certainly confuse many users, who have not been raised with tail call religion but might have learned about call semantics by tracing through a few calls in a debugger.  - Guido van Rossum"))))),(0,i.kt)("li",{parentName:"ul"},"coroutines",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"run ",(0,i.kt)("em",{parentName:"li"},"event loop")," then manage coroutines in it",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"passing control from one coroutine to another"))),(0,i.kt)("li",{parentName:"ul"},"thus coroutine is the way to run the program concurrently in a sigle thread"),(0,i.kt)("li",{parentName:"ul"},"only one coroutine runs at a time"),(0,i.kt)("li",{parentName:"ul"},"pros",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"no data corruption (vs. threads)"),(0,i.kt)("li",{parentName:"ul"},"no cost of memory and context switch (vs. processes)"))),(0,i.kt)("li",{parentName:"ul"},"cons",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"cannot be used for CPU-intensive jobs",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"because only one coroutine runs at a time and it blocks the entire process"),(0,i.kt)("li",{parentName:"ul"},"use processes instead"))),(0,i.kt)("li",{parentName:"ul"},"cannot be used for file I/O",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"we can use ",(0,i.kt)("inlineCode",{parentName:"li"},"asyncio.to_thread()")," to avoid blocking the entire process"))))))),(0,i.kt)("li",{parentName:"ul"},"descriptor",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the way to abstract away property definitions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a class that implements a dynamic protocol consisting of the ",(0,i.kt)("inlineCode",{parentName:"li"},"__get__()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"__set__()"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"__delete__()")," methods"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"method"),"s in python are also descriptor!"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"Reading an attribute through an instance normally returns the attribute defined in the instance, but if there is no such attribute in the instance, a class attribute will be retrieved. On the other hand, assigning to an attribute in an instance normally creates the attribute in the instance, without affecting the class at all."))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"type")," class is a ",(0,i.kt)("em",{parentName:"li"},"metaclass"),": a class that builds classes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"type")," is a subclass of ",(0,i.kt)("em",{parentName:"li"},"object")),(0,i.kt)("li",{parentName:"ul"},"but at the same time ",(0,i.kt)("em",{parentName:"li"},"object")," is an instance of ",(0,i.kt)("em",{parentName:"li"},"type")," (what?!)"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"some interesting references"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.google.com/document/d/1aXs1tpwzPjW9MdsG5dI7clNFyYayFBkcXwRDo-qvbIk/preview"},"Strong Typing vs. Strong Testing")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.yodaiken.com/2017/09/15/bad-ideas-in-type-theory/"},"Bad ideas in type theory")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.yodaiken.com/2017/11/30/types-considered-harmful-ii/"},"Types considered harmful II")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://web.archive.org/web/20071010002142/http://weblogs.java.net/blog/arnold/archive/2005/06/generics_consid_1.html"},"Generics Considered Harmful")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://gist.github.com/jboner/2841832"},"Latency Numbers Ever Programmer Should Know")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dreamsongs.com/RiseOfWorseIsBetter.html"},"Worse is Better"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"this was said by ",(0,i.kt)("em",{parentName:"li"},"The Unix Philosophy")),(0,i.kt)("li",{parentName:"ul"},"also, in Patterson & Hennessy's book: ",(0,i.kt)("em",{parentName:"li"},"\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u69cb\u6210\u3068\u8a2d\u8a08"),",",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"\u512a\u308c\u305f\u8a2d\u8a08\u306b\u306f\u9069\u5ea6\u306a\u59a5\u5354\u304c\u5fc5\u8981\u3067\u3042\u308b"))),(0,i.kt)("li",{parentName:"ul"},"this is a principle about hardware design, but i think this is true to software too"))))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"some wise words"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"Be conservative in what you send, be liberal in what you accept.  ","-"," Postel's law, a.k.a the Robustness Principle"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"If you want the sum of a list of items, you should write it in a way that looks like \u201cthe sum of a list of items,\u201d not in a way that looks like \u201cloop over these items, maintain another variable t, perform a sequence of additions.\u201d Why do we have high-level languages if not to express our intentions at a higher level and let the language worry about what low-level operations are needed to implement it?  ","-"," David Eppstein\u2019s"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"When I see patterns in my programs, I consider it a sign of trouble. The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I\u2019m using abstractions that aren\u2019t powerful enough\u2014often that I\u2019m generating by hand the expansions of some macro that I need to write. \u200b  \u2014\u200bPaul Graham, Lisp hacker and venture capitalist")))))))),(0,i.kt)("h2",{id:"in-progreess"},"In Progreess"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Essentials of Programming Languages")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Chapter 5. Continuation-Passing Interpreter",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"learned how to optimize tail recursion"),(0,i.kt)("li",{parentName:"ul"},"if recursive function is tail recursion, it no longer need data stored within the current scope of the function for the next call"),(0,i.kt)("li",{parentName:"ul"},"the way passing control flow like data was really fresh idea to me, i had never think like that"),(0,i.kt)("li",{parentName:"ul"},"but i still have a question",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"continuation-passing style actually doesn't leave the function on stack, which is waiting for the value returned from the function called in it"),(0,i.kt)("li",{parentName:"ul"},"but instead, continuations, which is a multi-nested closure, appear as arguments at a function call"),(0,i.kt)("li",{parentName:"ul"},"does this really work as optimization?"))))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"A Book of Abstract Algebra")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Chapter 5. Subgroups done!"),(0,i.kt)("li",{parentName:"ul"},"there are many terms that appear in ",(0,i.kt)("em",{parentName:"li"},"A First Course In Graph Theory"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"i've stopped reading it",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a lot of terminologies to which i'm not familiar"),(0,i.kt)("li",{parentName:"ul"},"very abstract"),(0,i.kt)("li",{parentName:"ul"},"boring"))),(0,i.kt)("li",{parentName:"ul"},"maybe i should've learn abstract algebra first",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"i wanna revenge after learning abstract algebra!")))))))),(0,i.kt)("h2",{id:"stack"},"Stack"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"implement something in rust"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"there is demand to rust in the company",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"honestly i think typescript is the best choice for almost all of our product",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"can write both frontend and backend",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"maybe server-side react will come"))),(0,i.kt)("li",{parentName:"ul"},"easy to learn and use"),(0,i.kt)("li",{parentName:"ul"},"good googlabiliity"),(0,i.kt)("li",{parentName:"ul"},"cost to learn rust and the strictness don't correspond with our products"),(0,i.kt)("li",{parentName:"ul"},"questionable to implement web apps in such a low-level language"))),(0,i.kt)("li",{parentName:"ul"},"but i wanna use rust if used go lang"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Programming in Haskell")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"putting aside good or bad, i like static typing and functional languages after all",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"really fun to write program in them"))),(0,i.kt)("li",{parentName:"ul"},"i wanna read again"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"SQL Antipatterns: Avoiding the Pitfalls of Database Programming"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Database Internals"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Computer Organization and Design MIPS Edition: The Hardware/Software Interface (6th ed.)")))),(0,i.kt)("h2",{id:"music"},"Music"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Beautiful World / Utada Hikaru")))}k.isMDXComponent=!0}}]);