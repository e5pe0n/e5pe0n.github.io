"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[5572],{9613:(t,n,e)=>{e.d(n,{Zo:()=>c,kt:()=>_});var r=e(9496);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function l(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function o(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?l(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function a(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},l=Object.keys(t);for(r=0;r<l.length;r++)e=l[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)e=l[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var s=r.createContext({}),u=function(t){var n=r.useContext(s),e=n;return t&&(e="function"==typeof t?t(n):o(o({},n),t)),e},c=function(t){var n=u(t.components);return r.createElement(s.Provider,{value:n},t.children)},p="mdxType",b={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(t,n){var e=t.components,i=t.mdxType,l=t.originalType,s=t.parentName,c=a(t,["components","mdxType","originalType","parentName"]),p=u(e),f=i,_=p["".concat(s,".").concat(f)]||p[f]||b[f]||l;return e?r.createElement(_,o(o({ref:n},c),{},{components:e})):r.createElement(_,o({ref:n},c))}));function _(t,n){var e=arguments,i=n&&n.mdxType;if("string"==typeof t||i){var l=e.length,o=new Array(l);o[0]=f;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=t,a[p]="string"==typeof t?t:i,o[1]=a;for(var u=2;u<l;u++)o[u]=e[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}f.displayName="MDXCreateElement"},8055:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>b,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var r=e(8957),i=(e(9496),e(9613));const l={},o="Bit Manipulation",a={unversionedId:"algorithms/bit-manipulation",id:"algorithms/bit-manipulation",title:"Bit Manipulation",description:"",source:"@site/docs/algorithms/bit-manipulation.md",sourceDirName:"algorithms",slug:"/algorithms/bit-manipulation",permalink:"/docs/algorithms/bit-manipulation",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"techNoteSidebar",previous:{title:"Algorithms",permalink:"/docs/category/algorithms"},next:{title:"Flow Networks",permalink:"/docs/algorithms/flow-algorithms"}},s={},u=[],c={toc:u},p="wrapper";function b(t){let{components:n,...e}=t;return(0,i.kt)(p,(0,r.Z)({},c,e,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bit-manipulation"},"Bit Manipulation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="C++"',title:'"C++"'},'#include <bitset>\n#include <string>\nusing namespace std;\nusing ll = long long;\n\nbool get_bit(ll n, ll i) {\n  return (n & (1LL << i)) != 0;\n}\n\nll set_bit(ll n, ll i) {\n  return n | (1LL << i);\n}\n\nll toggle_bit(ll n, ll i) {\n  return n ^ (1LL << i);\n}\n\nll clear_bit(ll n, ll i) {\n  ll mask = ~(1LL << i);\n  return n & mask;\n}\n\nll clear_bits_msb_though_i(ll n, ll i) {\n  ll mask = (1LL << i) - 1;\n  return n & mask;\n}\n\nll clear_bits_i_through_0(ll n, ll i) {\n  ll mask = -1LL << (i + 1);\n  return n & mask;\n}\n\nll update_bit(ll n, ll i, bool i_th_bit) {\n  ll mask = ~(1LL << i);\n  return (n & mask) | (i_th_bit << i);\n}\n\nint main() {\n  ll n = 7;\n  bitset<4> before(n);\n\n  bitset<4> b(get_bit(n, 2));\n  puts(before.to_string().c_str()); // 0111\n  printf("%d\\n", get_bit(n, 2));    // 1\n  puts("");\n\n  bitset<4> after1(set_bit(n, 3));\n  puts(before.to_string().c_str()); // 0111\n  puts(after1.to_string().c_str()); // 1111\n  puts("");\n\n  bitset<4> after2(toggle_bit(n, 1));\n  puts(before.to_string().c_str()); // 0111\n  puts(after2.to_string().c_str()); // 0101\n  puts("");\n\n  bitset<4> after3(clear_bit(n, 1));\n  puts(before.to_string().c_str()); // 0111\n  puts(after3.to_string().c_str()); // 0101\n  puts("");\n\n  bitset<4> after4(clear_bits_msb_though_i(n, 2));\n  puts(before.to_string().c_str()); // 0111\n  puts(after4.to_string().c_str()); // 0011\n  puts("");\n\n  bitset<4> after5(clear_bits_i_through_0(n, 1));\n  puts(before.to_string().c_str()); // 0111\n  puts(after5.to_string().c_str()); // 0100\n  puts("");\n\n  bitset<4> after6(update_bit(n, 1, 0));\n  puts(before.to_string().c_str()); // 0111\n  puts(after6.to_string().c_str()); // 0101\n  puts("");\n}\n')))}b.isMDXComponent=!0}}]);