"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[4376],{9298:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"coding/python/tips-for-competitive-programimng","title":"Tips for Competitive Programming","description":"Increase the limit of recursion","source":"@site/docs/coding/python/tips-for-competitive-programimng.md","sourceDirName":"coding/python","slug":"/coding/python/tips-for-competitive-programimng","permalink":"/docs/coding/python/tips-for-competitive-programimng","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"techNoteSidebar","previous":{"title":"Fundamentals","permalink":"/docs/coding/python/fundamentals"},"next":{"title":"Rust","permalink":"/docs/category/rust"}}');var t=i(6070),r=i(5248);const o={},a="Tips for Competitive Programming",p={},l=[{value:"Increase the limit of recursion",id:"increase-the-limit-of-recursion",level:2},{value:"Use <em>Python</em> if you use recursion, instead of <em>PyPy</em>",id:"use-python-if-you-use-recursion-instead-of-pypy",level:2},{value:"Use <em>list</em> to join strings, instead of <em>str</em>",id:"use-list-to-join-strings-instead-of-str",level:2},{value:"Take mod appropriately",id:"take-mod-appropriately",level:2},{value:"Priority Queue",id:"priority-queue",level:2},{value:"Min Heap",id:"min-heap",level:3},{value:"Max Heap",id:"max-heap",level:3}];function h(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"tips-for-competitive-programming",children:"Tips for Competitive Programming"})}),"\n",(0,t.jsx)(n.h2,{id:"increase-the-limit-of-recursion",children:"Increase the limit of recursion"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"default is 1000."}),"\n",(0,t.jsxs)(n.li,{children:["set to like ",(0,t.jsx)(n.em,{children:"10^9"})," using ",(0,t.jsx)(n.code,{children:"setrecursionlimit()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["not sure that ",(0,t.jsx)(n.em,{children:"10^9"})," is appropriate value but had never failed so far at AtCoder"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sys import setrecursionlimit\nsetrecursionlimit(10**9)\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"use-python-if-you-use-recursion-instead-of-pypy",children:["Use ",(0,t.jsx)(n.em,{children:"Python"})," if you use recursion, instead of ",(0,t.jsx)(n.em,{children:"PyPy"})]}),"\n",(0,t.jsxs)(n.p,{children:["ordinaly ",(0,t.jsx)(n.em,{children:"PyPy"})," performs better than ",(0,t.jsx)(n.em,{children:"Python"}),", but when using recursion it looks slower than ",(0,t.jsx)(n.em,{children:"Python"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"use-list-to-join-strings-instead-of-str",children:["Use ",(0,t.jsx)(n.em,{children:"list"})," to join strings, instead of ",(0,t.jsx)(n.em,{children:"str"})]}),"\n",(0,t.jsxs)(n.p,{children:["Python's ",(0,t.jsx)(n.em,{children:"str"})," instance is immutable object so every join like ",(0,t.jsx)(n.code,{children:"s += xxx"})," create a new ",(0,t.jsx)(n.em,{children:"str"})," instance. this couse big overhead."]}),"\n",(0,t.jsxs)(n.p,{children:["e.g. ",(0,t.jsx)(n.a,{href:"https://atcoder.jp/contests/abc158/tasks/abc158_d:embed:cite",children:"AtCoder ABC158"})]}),"\n",(0,t.jsx)(n.p,{children:"proglem that string manipulation is needed to like append or prepend string."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="Using str (1975 ms)"',children:'S = input()\nQ = int(input())\nf = False\nfront, back = "", ""\nfor _ in range(Q):\n    query = input().split()\n    if len(query) == 1:\n        f = not f\n    else:\n        F, C = query[1:]\n        if F == "1":\n            if f:\n                back += C\n            else:\n                front += C\n        else:\n            if f:\n                front += C\n            else:\n                back += C\nif f:\n    res = back[::-1] + S[::-1] + front\nelse:\n    res = front[::-1] + S + back\nprint(res)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="Using list (295 ms)"',children:'S = input()\nQ = int(input())\nf = False\nfront, back = [], []\nfor _ in range(Q):\n    query = input().split()\n    if len(query) == 1:\n        f = not f\n    else:\n        F, C = query[1:]\n        if F == "1":\n            if f:\n                back.append(C)\n            else:\n                front.append(C)\n        else:\n            if f:\n                front.append(C)\n            else:\n                back.append(C)\nif f:\n    res = "".join(back[::-1]) + S[::-1] + "".join(front)\nelse:\n    res = "".join(front[::-1]) + S + "".join(back)\nprint(res)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"take-mod-appropriately",children:"Take mod appropriately"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Python's ",(0,t.jsx)(n.em,{children:"int"})," can have infinite value, but calculations involving big integers take a long time."]}),"\n",(0,t.jsx)(n.li,{children:"take mode appropriately to keep the integer small"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"priority-queue",children:"Priority Queue"}),"\n",(0,t.jsx)(n.h3,{id:"min-heap",children:"Min Heap"}),"\n",(0,t.jsx)(n.p,{children:"Python has only min heap."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from heapq import heapify, heappop, heappush\n\nq = []\nheapify(q)\nheappush(q, 1)\nheappush(q, 5)\nheappush(q, 3)\nwhile len(q):\n    p = heappop(q)\n    print(p)    # 1 3 5\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from heapq import heapify, heappop, heappush\n\n\nclass Edge:\n    def __init__(self, u, v, w):\n        self.u = u\n        self.v = v\n        self.w = w\n\n    def __lt__(self, other):\n        return self.w < other.w\n\n    def __gt__(self, other):\n        return self.w > other.w\n\n\nq = []\nheapify(q)\nheappush(q, Edge(1, 2, 1))\nheappush(q, Edge(0, 1, 5))\nheappush(q, Edge(0, 2, 3))\nwhile len(q):\n    e = heappop(q)\n    print(e.w)    # 1 3 5\n"})}),"\n",(0,t.jsx)(n.h3,{id:"max-heap",children:"Max Heap"}),"\n",(0,t.jsxs)(n.p,{children:["Python does not have max heap.",(0,t.jsx)(n.br,{}),"\n","We can get the same effect by negating values both when pushing and popping them."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from heapq import heapify, heappop, heappush\n\nq = []\nheapify(q)\nheappush(q, -1)\nheappush(q, -5)\nheappush(q, -3)\nwhile len(q):\n    p = -heappop(q)\n    print(p)    # 5 3 1\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from heapq import heapify, heappop, heappush\n\n\nclass Edge:\n    def __init__(self, u, v, w):\n        self.u = u\n        self.v = v\n        self.w = w\n\n    def __lt__(self, other):\n        return self.w > other.w\n\n    def __gt__(self, other):\n        return self.w < other.w\n\n\nq = []\nheapify(q)\nheappush(q, Edge(1, 2, 1))\nheappush(q, Edge(0, 1, 5))\nheappush(q, Edge(0, 2, 3))\nwhile len(q):\n    e = heappop(q)\n    print(e.w)    # 5 3 1\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},5248:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(758);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);