"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[3807],{7423:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"software/software-design","title":"Software Design","description":"Axioms","source":"@site/docs/software/software-design.md","sourceDirName":"software","slug":"/software/software-design","permalink":"/docs/software/software-design","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"techNoteSidebar","previous":{"title":"Product Management and Scrum Framework","permalink":"/docs/software/scrum"},"next":{"title":"System","permalink":"/docs/category/system"}}');var l=i(6070),r=i(5248);const t={},c="Software Design",o={},a=[{value:"Axioms",id:"axioms",level:2},{value:"Software Architecture",id:"software-architecture",level:2},{value:"Symptoms of Complexity",id:"symptoms-of-complexity",level:2},{value:"Causes of Complexity",id:"causes-of-complexity",level:2},{value:"Modular Design",id:"modular-design",level:2},{value:"Interfaces",id:"interfaces",level:3},{value:"Implementations",id:"implementations",level:3},{value:"Performance",id:"performance",level:2},{value:"Domain",id:"domain",level:2},{value:"Model",id:"model",level:2},{value:"SOLID Principles",id:"solid-principles",level:2},{value:"SRP; Single Responsibility Principle",id:"srp-single-responsibility-principle",level:3},{value:"OCP; Open-Closed Principle",id:"ocp-open-closed-principle",level:3},{value:"LSP; Liskov Substitution Principle",id:"lsp-liskov-substitution-principle",level:3},{value:"ISP; Interface Segregation Principle",id:"isp-interface-segregation-principle",level:3},{value:"DIP; Dependency Inversion Principle",id:"dip-dependency-inversion-principle",level:3},{value:"Components",id:"components",level:2},{value:"Component-level Principles",id:"component-level-principles",level:3},{value:"REP; Reuse/Release Equivalence Principle",id:"rep-reuserelease-equivalence-principle",level:4},{value:"CCP; Common Closure Principle",id:"ccp-common-closure-principle",level:4},{value:"CRP; Common Reuse Principle",id:"crp-common-reuse-principle",level:4},{value:"Component Dependencies",id:"component-dependencies",level:3},{value:"ADP; Asynclic Dependencies Principle",id:"adp-asynclic-dependencies-principle",level:4},{value:"SDP; Stable Dependencies Principle",id:"sdp-stable-dependencies-principle",level:4},{value:"SAP; Stable Abstraction Principle",id:"sap-stable-abstraction-principle",level:4},{value:"Business Rules",id:"business-rules",level:2},{value:"Humble Objects",id:"humble-objects",level:2},{value:"Layered Architecture",id:"layered-architecture",level:2},{value:"Model-Driven Design",id:"model-driven-design",level:2},{value:"Components",id:"components-1",level:3},{value:"Entities",id:"entities",level:4},{value:"Value Objects",id:"value-objects",level:4},{value:"Services",id:"services",level:4},{value:"Life Cycle Management of Domain Objects",id:"life-cycle-management-of-domain-objects",level:3},{value:"Aggregates",id:"aggregates",level:4},{value:"Factories",id:"factories",level:4},{value:"Repositories",id:"repositories",level:4},{value:"Supple Design",id:"supple-design",level:2},{value:"Model Integrity Patterns",id:"model-integrity-patterns",level:2},{value:"Smart Constructor",id:"smart-constructor",level:2},{value:"Referencies",id:"referencies",level:2}];function d(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"software-design",children:"Software Design"})}),"\n",(0,l.jsx)(n.h2,{id:"axioms",children:"Axioms"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["software design is not a solid stuff","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"designing software architecture never ends"}),"\n",(0,l.jsx)(n.li,{children:"it is changing over development"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["the primary purpose of architecture is to support the life cycle of the system","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"good architecture makes the system easy to understand, easy to develop, easy to maintain, and easy to deploy"}),"\n",(0,l.jsx)(n.li,{children:"the ultimate goal is to minimize the lifetime cost of the system and to maxmize programmer productivity"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"the architecture of the system should elevate the use cases, the features, and the required behaviours of the system to first-class entities that are visible landmarks for the developers"}),"\n",(0,l.jsx)(n.li,{children:"good architecture centered on use cases so that architects can safely describe the structures that support those use cases without commiting to frameworks, tools, and environments"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"software-architecture",children:"Software Architecture"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Structure","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["type of architecture style","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"microservice"}),"\n",(0,l.jsx)(n.li,{children:"layered"}),"\n",(0,l.jsx)(n.li,{children:"microkernel"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Architecture Charactaristics","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["success criteria of a system","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"availability"}),"\n",(0,l.jsx)(n.li,{children:"reliability"}),"\n",(0,l.jsx)(n.li,{children:"testability"}),"\n",(0,l.jsx)(n.li,{children:"scalability"}),"\n",(0,l.jsx)(n.li,{children:"security"}),"\n",(0,l.jsx)(n.li,{children:"agility"}),"\n",(0,l.jsx)(n.li,{children:"fault tolerance"}),"\n",(0,l.jsx)(n.li,{children:"elasticity"}),"\n",(0,l.jsx)(n.li,{children:"receverability"}),"\n",(0,l.jsx)(n.li,{children:"performance"}),"\n",(0,l.jsx)(n.li,{children:"deployablility"}),"\n",(0,l.jsx)(n.li,{children:"learnability"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Architecture Decision","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"rules for how a system should be constructed"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Design Principles","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a guideline"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"symptoms-of-complexity",children:"Symptoms of Complexity"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"change amplification"}),"\n",(0,l.jsx)(n.li,{children:"cognitive load"}),"\n",(0,l.jsx)(n.li,{children:"unknown unknown"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"causes-of-complexity",children:"Causes of Complexity"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"dependendies"}),"\n",(0,l.jsx)(n.li,{children:"obscurity"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"modular-design",children:"Modular Design"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"goal of modular design is moinimize the dependencies between modules"}),"\n",(0,l.jsxs)(n.li,{children:["module consists of ",(0,l.jsx)(n.em,{children:"interface"})," and ",(0,l.jsx)(n.em,{children:"implementation"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"interfaces",children:"Interfaces"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"any information a developer needs to know in order to use a module"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["e.g.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["signiture","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"name"}),"\n",(0,l.jsx)(n.li,{children:"parameters"}),"\n",(0,l.jsx)(n.li,{children:"returns"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"comments, documents"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"if users need to read the code of a method in order to use it, then there is no abstraction"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"more important for a module to have a simple interface than a simple implementation"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"implementations",children:"Implementations"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"reduce the number of places where exceptions have to be handled"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"define errors out of existence"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"before attempting to improve performance, measure the system's existing behaviour"})}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"domain",children:"Domain"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"subject area to which users applies the program"}),"\n",(0,l.jsx)(n.li,{children:"subject area of the problem we solve using software"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"model",children:"Model"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"simplification"}),"\n",(0,l.jsxs)(n.li,{children:["abstraction","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"filter out extraneous details"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["effective modeling","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"knowledge crunching"}),"\n",(0,l.jsxs)(n.li,{children:["cultivating a language based on the model","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Ubiquitous Language","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"changes in the Ubiquitous Language are changes to the model"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["iteration","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"software development is all design"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["don't just model reality (e.g. actual manual operations that will be automated by software/system) as is","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"model them from the perspective of software/system too"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"solid-principles",children:"SOLID Principles"}),"\n",(0,l.jsx)(n.p,{children:"suggest how to arrange functions and data structures into classes, and how those classes should be interconnected to design the mid-level (module level) software architectures that"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"tolerate change"}),"\n",(0,l.jsx)(n.li,{children:"are easy to undarstand"}),"\n",(0,l.jsx)(n.li,{children:"are reusable in many software systems"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"srp-single-responsibility-principle",children:"SRP; Single Responsibility Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["a module should be responsible to one, and only one, actor","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"actor: group of user or stakeholder who wants the system changed in the same way"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"a moule should NOT have multiple reasons to change"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"ocp-open-closed-principle",children:"OCP; Open-Closed Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a software architect should be open for extension but closed for modification"}),"\n",(0,l.jsx)(n.li,{children:"if SRP is obeyed, a feature extension won't affect to modules for other features"}),"\n",(0,l.jsx)(n.li,{children:"associated with CCP"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"lsp-liskov-substitution-principle",children:"LSP; Liskov Substitution Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"polymorphism"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"isp-interface-segregation-principle",children:"ISP; Interface Segregation Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"avoid depending on things that they don't use"}),"\n",(0,l.jsx)(n.li,{children:"have clear abstraction/concept of the module"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"dip-dependency-inversion-principle",children:"DIP; Dependency Inversion Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"implement interfaces for the high-level module which uses lower-level modules"}),"\n",(0,l.jsx)(n.li,{children:"lower-level modules should NOT know the implementation details of higher-level modules"}),"\n",(0,l.jsxs)(n.li,{children:["have lower-level modules obey the interfaces","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"now we can have inverted dependency from lower-level to higher-level without knowledge about implemetation details of higher-level module"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,l.jsx)(n.h3,{id:"component-level-principles",children:"Component-level Principles"}),"\n",(0,l.jsx)(n.h4,{id:"rep-reuserelease-equivalence-principle",children:"REP; Reuse/Release Equivalence Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"the granule of reuse is the granule of release"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"ccp-common-closure-principle",children:"CCP; Common Closure Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["component-level ",(0,l.jsx)(n.a,{href:"#srp-single-responsibility-principle",children:"SRP"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a component should NOT have multiple reasons to change"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"crp-common-reuse-principle",children:"CRP; Common Reuse Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["component-level ",(0,l.jsx)(n.a,{href:"#isp-interface-segregation-principle",children:"ISP"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"component-dependencies",children:"Component Dependencies"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["component structure cannot be designed from the top down","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"component dependencies graph is created for the first time if it reached the time dependency management was necessary"}),"\n",(0,l.jsx)(n.li,{children:"component dependencies graphs is for mapping to buildability and maintainability of the application; not for describing the function of the application"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"adp-asynclic-dependencies-principle",children:"ADP; Asynclic Dependencies Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"allow no cycles in the component dependency graph"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"sdp-stable-dependencies-principle",children:"SDP; Stable Dependencies Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"depend in the direction of stability"}),"\n",(0,l.jsx)(n.li,{children:"ensure that modules that are intended to be easy to change are not depended on by modules that are harder to change"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"sap-stable-abstraction-principle",children:"SAP; Stable Abstraction Principle"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a component should be as abstract as it is stable"}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#sdp-stable-dependencies-principle",children:"SDP"})," + ",(0,l.jsx)(n.a,{href:"#sap-stable-abstraction-principle",children:"SAP"})," -> dependencies run in the direction of abstraction"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"business-rules",children:"Business Rules"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Critical Business Rules","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"make or save the business money"}),"\n",(0,l.jsx)(n.li,{children:"some of them are purelly irrespective of whether they were implemented on a computer"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Entity","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Critical Business Data","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"data required by critical business rules"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["generalized concept; not ",(0,l.jsx)(n.em,{children:"application-specific"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Use Cases","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["define ",(0,l.jsx)(n.em,{children:"application-specific"})," business rules","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"automated operation to make or save the business money"}),"\n",(0,l.jsx)(n.li,{children:"at lower-level than Entities since Use Cases depend on the application/system; not generalized as much as Entities"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"e.g. apply an estimation (validation) to user info for loan then create Customer entity if acceptable"}),"\n",(0,l.jsxs)(n.li,{children:["have input and ouput","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["but should not depend on how input and output are delivered","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"e.g. HTTP request and response, HTML, SQL"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.mermaid,{value:"classDiagram\n    class Loan{\n        - principle\n        - rate\n        - period\n        + makePayment() // Business Rule\n        + applyInterest() // Business Rule\n        + chargeLateFee() // Business Rule\n    }"}),"\n",(0,l.jsx)(n.h2,{id:"humble-objects",children:"Humble Objects"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"separate behaviours into tastables and non-testables"}),"\n",(0,l.jsxs)(n.li,{children:["from the uesr's point of view, an object is simply a set of operations; an object represent behaviours","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"becaues users cannot see private fields"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"layered-architecture",children:"Layered Architecture"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"User Interface (or Presentation Layer)"}),"\n",(0,l.jsxs)(n.li,{children:["Application Layer","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"services"}),"\n",(0,l.jsx)(n.li,{children:"not contain business rules or knowledge"}),"\n",(0,l.jsx)(n.li,{children:"not have state reflecting business situation"}),"\n",(0,l.jsx)(n.li,{children:"only coordinates tasks and delegates work to collaborations of domain objects in the next layer down"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Domain Layer (or Model Layer)","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"business situation"}),"\n",(0,l.jsx)(n.li,{children:"business rules"}),"\n",(0,l.jsx)(n.li,{children:"control and use state reflecting the business situation"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Infrastructure Layer","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"ORM"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"model-driven-design",children:"Model-Driven Design"}),"\n",(0,l.jsx)(n.mermaid,{value:"flowchart LR\n  mdd(Model-Driven Design) --\x3e|express model with|s(services)\n  mdd(Model-Driven Design) --\x3e|express model with|e(Entities)\n  mdd(Model-Driven Design) --\x3e|express model with|vo(Value Object)\n  mdd(Model-Driven Design) --\x3e|isolate domain with|la(Layered Architecture)\n\n  e --\x3e|access with|r(Repositories)\n  e --\x3e|maintain integrity with|a(Aggregates)\n  e --\x3e|act as root of|a\n  e --\x3e|encapsulate with|f(Factories)\n\n  vo --\x3e|encapsulate with|a\n  vo --\x3e|encapsulate with|f\n\n  a --\x3e|encapsulate with|f\n  a --\x3e|access with|r"}),"\n",(0,l.jsx)(n.h3,{id:"components-1",children:"Components"}),"\n",(0,l.jsx)(n.h4,{id:"entities",children:"Entities"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["distinguished by its identity","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"guaranteed the uniqueness"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"need to maintain the life cycle"}),"\n",(0,l.jsx)(n.li,{children:"e.g. user"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"value-objects",children:"Value Objects"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["representing a descriptive aspect of the domain with no conceptual identity","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["representing elements of the design that we care about only for ",(0,l.jsx)(n.em,{children:"what"})," they are, not ",(0,l.jsx)(n.em,{children:"who"})," or ",(0,l.jsx)(n.em,{children:"which"})," they are"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"immutable"}),"\n",(0,l.jsx)(n.li,{children:"disposable"}),"\n",(0,l.jsxs)(n.li,{children:["e.g.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"attributes of an Entity"}),"\n",(0,l.jsx)(n.li,{children:"used as parameters in messages between objects"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.mermaid,{value:'classDiagram\n  note for Customer "Entity"\n  note for Address "Value Object"\n  Customer *-- Address\n  class Customer{\n    customerID\n    name\n    address\n  }\n  class Address{\n    street\n    city\n    state\n  }'}),"\n",(0,l.jsx)(n.h4,{id:"services",children:"Services"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["overview","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["an operation offered as an interface that stands alone in the model, without encapsulating state, as Entities and Value Objects do","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"operation names should come from the Ubiquitous Language or be introduced into it"}),"\n",(0,l.jsx)(n.li,{children:"parameters and results should be domain objects"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["characteristics","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"the operation relates to a domain concept that is not a natural part of an Entity or Value Object"}),"\n",(0,l.jsx)(n.li,{children:"the interface is defined in terms of other elements of the domain model"}),"\n",(0,l.jsx)(n.li,{children:"the operation is stateless"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"life-cycle-management-of-domain-objects",children:"Life Cycle Management of Domain Objects"}),"\n",(0,l.jsx)(n.h4,{id:"aggregates",children:"Aggregates"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["a cluster of associated objects that we treat as a unit for the purpose of data changes","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"transaction against the associated objects"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["responsibilities","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"invariant enforcement"}),"\n",(0,l.jsx)(n.li,{children:"change management"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["consists of a root and a boundary","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["root","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a single, specific Entity"}),"\n",(0,l.jsx)(n.li,{children:"objects outside the Aggregate can reference to only the root"}),"\n",(0,l.jsxs)(n.li,{children:["can be obtained directly from resource (e.g. database)","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"other objects must be found by traversal of associations"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["boundary","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a delete operation must remove everything within the boundary at once"}),"\n",(0,l.jsx)(n.li,{children:"when a change to any object within the boundary is commited, all invariants of the whole Aggregate must be satisfied"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"factories",children:"Factories"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"manage the beginning of the object's life cycle"}),"\n",(0,l.jsxs)(n.li,{children:["create and reconstitute complex objects","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"delegate invariant checking to objects or aggregate"}),"\n",(0,l.jsx)(n.li,{children:"ensure that creating objects satisfy client and internal rules"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"repositories",children:"Repositories"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"manage the middle and end of the object's life cycle"}),"\n",(0,l.jsxs)(n.li,{children:["motivation","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"allowing free access from client to infrastructure such as database leads to complicate the client and obscure model-driven design"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"emulate access to infrastructure as if it is just like to manipulate a in-memory collection such as lists and maps"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"but leave transaction control to the client"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"don't fight frameworks"}),"; look for affinities between the concepts of domain-driven design and the concenpts in the framework"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Repositories as object are not necessary when contructing a workflow placing I/O process to the edge in the workflow"})}),"\n"]}),"\n",(0,l.jsx)(n.mermaid,{value:'flowchart LR\n  jxi(JSON/XML)\n  ds(Desirialize)\n  di("DTO-In; Data Transfer Object")\n  di2dm(DTO-In to Domain Model)\n  dm(Domain Model)\n  dm2do(Domain Model to DTO-Out)\n  do("DTO-Out; Data Transfer Object")\n  so(Serialize)\n  jxo(JSON/XML)\n\n  subgraph From Upstream Context\n  jxi --\x3e ds\n  ds --\x3e di\n  end\n\n  subgraph Bounded Context\n    subgraph I/O-In\n      di --\x3e di2dm\n    end\n\n  di2dm --\x3e dm\n  dm --\x3e dm2do\n\n    subgraph Pure Code\n      dm\n    end\n    subgraph I/O-Out\n      dm2do\n    end\n  end\n\n  subgraph To Donwstream Context\n  dm2do --\x3e do\n  do --\x3e so\n  so --\x3e jxo\n  end'}),"\n",(0,l.jsx)(n.h2,{id:"supple-design",children:"Supple Design"}),"\n",(0,l.jsx)(n.mermaid,{value:"flowchart LR\n  ul(Ubiquitous Language)\n  iri(Intention-Revealing Interfaces)\n  mmd(Model-Driven Design)\n  sc(Standalone Classes)\n  cc(Conceptual Contours)\n  coo(Closure of Operations)\n  seff(Side-Effect-Free Functions)\n  a(Assertions)\n\n  iri --\x3e|draw from| ul\n  iri --\x3e|simplify interpretation| coo\n  iri --\x3e|make safe and simple| seff\n  iri --\x3e|make side effects explicit| a\n\n  seff <--\x3e|make composition safe| a\n\n  mmd --\x3e|simplify interpretation| sc\n  mmd --\x3e|express model through| iri\n  mmd --\x3e|reduce cost of change| cc\n\n\n  sc --\x3e|may use| coo\n"}),"\n",(0,l.jsx)(n.h2,{id:"model-integrity-patterns",children:"Model Integrity Patterns"}),"\n",(0,l.jsx)(n.mermaid,{value:"flowchart TD\n  bc(Bounded Context)\n  ul(Ubiquitous Language)\n  ci(Continuous Integration)\n  cm(Context Map)\n  sk(Shared Kernel)\n  cst(Customer/Supplier Teams)\n  c(Conformist)\n  ohs(Open Host Service)\n  pl(Published Language)\n  sw(Separate Ways)\n  al(Anticorruption Layer)\n\n  bc --\x3e|names enter| ul\n  bc --\x3e|keep model unified by| ci\n  bc --\x3e|assess/overview relationships with| cm\n  cm --\x3e|oeverlap allied contexts through| sk\n  cm --\x3e|relate allied contexts as| cst\n  cm --\x3e|overlap unilaterally as| c\n  cm --\x3e|support multiple clients through| ohs\n  ohs --\x3e|formalize as| pl\n  cm --\x3e|free teams to go| sw\n  cm --\x3e|traslate and insulate unilaterally with| al\n"}),"\n",(0,l.jsx)(n.h2,{id:"smart-constructor",children:"Smart Constructor"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"validate initial values ensuring the created object is valid and holds invariants"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"referencies",children:"Referencies"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://www.amazon.co.jp/-/en/John-K-Ousterhout-ebook/dp/B09B8LFKQL",children:"A Philosophy of Software Design"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/",children:"Clean Architecture: A Craftsman\u2019s Guide to Software Structure and Design"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/",children:"Fundamentals of Software Architecture"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/",children:"Domain-Driven Design: Tackling Complexity in the Heart of Software"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://pragprog.com/titles/swdddf/domain-modeling-made-functional/",children:"Domain Modeling Made Functional - Tackle Software Complexity with Domain-Driven Design and F#"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://effective-haskell.com/",children:"Effective Haskell"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},5248:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(758);const l={},r=s.createContext(l);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);