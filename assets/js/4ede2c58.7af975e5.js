"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[1013],{7100:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"algorithms/trees","title":"Trees","description":"Find-Union Tree","source":"@site/docs/algorithms/trees.md","sourceDirName":"algorithms","slug":"/algorithms/trees","permalink":"/docs/algorithms/trees","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"techNoteSidebar","previous":{"title":"Strings Algorithms","permalink":"/docs/algorithms/strings-algorithms"},"next":{"title":"Coding","permalink":"/docs/category/coding"}}');var s=i(6070),r=i(5248);const a={},l="Trees",d={},m=[{value:"Find-Union Tree",id:"find-union-tree",level:2},{value:"Segment Trees",id:"segment-trees",level:2},{value:"RMQ: Range Minimum Query",id:"rmq-range-minimum-query",level:3},{value:"BIT: Binary Indexed Tree",id:"bit-binary-indexed-tree",level:3}];function c(n){const e={annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"trees",children:"Trees"})}),"\n",(0,s.jsx)(e.h2,{id:"find-union-tree",children:"Find-Union Tree"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"DON'T FORGET TO CALL init() !!"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="C++"',children:"ll par[MAX_N], rnk[MAX_N];\n\nvoid init() {\n  for (ll i = 0; i < N; ++i) {\n    par[i] = i;\n    rnk[i] = 0;\n  }\n}\n\nll find(ll x) {\n  if (x == par[x]) return x;\n  return par[x] = find(par[x]);\n}\n\nvoid unite(ll x, ll y) {\n  x = find(x);\n  y = find(y);\n  if (x == y) return;\n  if (rnk[x] < rnk[y])\n    par[x] = y;\n  else {\n    par[y] = x;\n    if (rnk[x] == rnk[y]) ++rnk[x];\n  }\n}\n\nbool same(ll x, ll y) {\n  return find(x) == find(y);\n}\n\nint main() {\n  cin >> N >> M;\n  init();\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:'title="Python"',children:"N, M = map(int, input().split())\n\npar = list(range(N))\nrnk = [0] * N\n\n\ndef find(x):\n    global par\n    if x == par[x]:\n        return x\n    par[x] = find(par[x])\n    return par[x]\n\n\ndef unite(x, y):\n    global par, rnk\n    x = find(x)\n    y = find(y)\n    if x == y:\n        return\n    if rnk[x] < rnk[y]:\n        par[x] = y\n    else:\n        par[y] = x\n        if rnk[x] == rnk[y]:\n            rnk[x] += 1\n\n\ndef same(x, y):\n    return find(x) == find(y)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"segment-trees",children:"Segment Trees"}),"\n",(0,s.jsx)(e.h3,{id:"rmq-range-minimum-query",children:"RMQ: Range Minimum Query"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Each node holds min val in the range"}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsxs)(e.span,{className:"katex",children:[(0,s.jsx)(e.span,{className:"katex-mathml",children:(0,s.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(e.semantics,{children:[(0,s.jsxs)(e.mrow,{children:[(0,s.jsx)(e.mi,{children:"O"}),(0,s.jsx)(e.mo,{stretchy:"false",children:"("}),(0,s.jsx)(e.mi,{children:"l"}),(0,s.jsx)(e.mi,{children:"o"}),(0,s.jsx)(e.mi,{children:"g"}),(0,s.jsx)(e.mi,{children:"N"}),(0,s.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(log N)"})]})})}),(0,s.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(e.span,{className:"base",children:[(0,s.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(e.span,{className:"mopen",children:"("}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,s.jsx)(e.span,{className:"mclose",children:")"})]})})]})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-txt",metastring:'title="test1.txt"',children:"8\n5 3 7 9 6 4 1 2\n       1\n   3       1\n 3   7   4   1\n5 3 7 9 6 4 1 2\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="C++"',children:'#include <algorithm>\n#include <climits>\n#include <fstream>\n#include <stdio.h>\n\nusing namespace std;\n\nconst int MAX_N = 1 << 17;\nint n;\nint dat[MAX_N * 2 - 1];\n\nvoid init(int n_) {\n  n = 1;\n  while (n < n_)\n    n *= 2;\n  for (int i = 0; i < n * 2 - 1; ++i) {\n    dat[i] = INT_MAX;\n  }\n}\n\nvoid update(int k, int a) {\n  k += n - 1;\n  dat[k] = a;\n  while (k > 0) {\n    k = (k - 1) / 2;\n    dat[k] = min(dat[k * 2 + 1], dat[k * 2 + 2]);\n  }\n}\n\nint query(int a, int b, int k, int left, int right) {\n  // return min val in [a, b)\n  if (right <= a || b <= left) {\n    return INT_MAX;\n  }\n  if (a <= left && right <= b) {\n    return dat[k];\n  } else {\n    int vl = query(a, b, k * 2 + 1, left, (left + right) / 2);\n    int vr = query(a, b, k * 2 + 2, (left + right) / 2, right);\n    return min(vl, vr);\n  }\n}\n\nint main() {\n  ifstream ifs("../testset/segment_tree_rmq/test1.txt");\n  int N;\n  ifs >> N;\n  init(N);\n  for (int i = 0; i < N; ++i) {\n    int x;\n    ifs >> x;\n    update(i, x);\n  }\n  printf("%d\\n", query(0, 7, 0, 0, n)); // 1\n  printf("%d\\n", query(2, 6, 0, 0, n)); // 4\n  printf("%d\\n", query(7, 8, 0, 0, n)); // 2\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:'title="Python"',children:"INF = float('inf')\n\n\ndef ns(f):\n    return next(f).strip()\n\n\nwith open(\"../testset/segment_tree_rmq/test1.txt\", 'r') as f:\n    N = int(ns(f))\n    X = list(map(int, ns(f).split()))\n\nn = 1\nwhile n < N:\n    n *= 2\ndat = [INF] * (n * 2 - 1)\n\n\ndef update(k, a):\n    global dat\n    k += n - 1\n    dat[k] = a\n    while k > 0:\n        k = (k - 1) // 2\n        dat[k] = min(dat[k * 2 + 1], dat[k * 2 + 2])\n\n\ndef query(a, b, k, left, right):\n    if right <= a or b <= left:\n        return INF\n    if a <= left and right <= b:\n        return dat[k]\n    else:\n        vl = query(a, b, k * 2 + 1, left, (left + right) // 2)\n        vr = query(a, b, k * 2 + 2, (left + right) // 2, right)\n        return min(vl, vr)\n\n\nfor i, x in enumerate(X):\n    update(i, x)\nprint(query(0, 7, 0, 0, n))  # 1\nprint(query(2, 6, 0, 0, n))  # 4\nprint(query(7, 8, 0, 0, n))  # 2\n"})}),"\n",(0,s.jsx)(e.h3,{id:"bit-binary-indexed-tree",children:"BIT: Binary Indexed Tree"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Each node holds sum of vals in the range"}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsxs)(e.span,{className:"katex",children:[(0,s.jsx)(e.span,{className:"katex-mathml",children:(0,s.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(e.semantics,{children:[(0,s.jsxs)(e.mrow,{children:[(0,s.jsx)(e.mi,{children:"O"}),(0,s.jsx)(e.mo,{stretchy:"false",children:"("}),(0,s.jsx)(e.mi,{children:"l"}),(0,s.jsx)(e.mi,{children:"o"}),(0,s.jsx)(e.mi,{children:"g"}),(0,s.jsx)(e.mi,{children:"N"}),(0,s.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(log N)"})]})})}),(0,s.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(e.span,{className:"base",children:[(0,s.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(e.span,{className:"mopen",children:"("}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,s.jsx)(e.span,{className:"mclose",children:")"})]})})]})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-txt",metastring:'title="test1.txt"',children:"8\n5 3 7 9 6 4 1 2\n       37\n   24      13\n 8   16  10  3\n5 3 7 9 6 4 1 2\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="C++"',children:'#include <fstream>\n#include <stdio.h>\n\n#define MAX_N 100\'000\n\nusing namespace std;\n\nint N;\nint B[MAX_N + 1];\n\nint sum(int i) {\n  // return sum of vals in [0, i]\n  int s = 0;\n  while (i > 0) {\n    s += B[i];\n    i -= i & -i;  // minus last 1 bit\n  }\n  return s;\n}\n\nvoid add(int i, int diff) {\n  while (i <= N) {\n    B[i] += diff;\n    i += i & -i;  // plus last 1 bit\n  }\n}\n\nint main() {\n  ifstream ifs("../testset/binary_indexed_tree/test1.txt");\n  ifs >> N;\n  for (int i = 1; i <= N; ++i) {\n    int b;\n    ifs >> b;\n    add(i, b);\n  }\n  printf("%d\\n", sum(7)); // 35\n  printf("%d\\n", sum(4)); // 24\n  printf("%d\\n", sum(1)); // 5\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:'title="C++"',children:"def ns(f):\n    return next(f).strip()\n\n\nwith open(\"../testset/binary_indexed_tree/test1.txt\", 'r') as f:\n    N = int(ns(f))\n    A = list(map(int, ns(f).split()))\n\nB = [0] * (N + 1)\n\n\ndef _sum(i):\n    s = 0\n    while i > 0:\n        s += B[i]\n        i -= i & -i # minus last 1 bit\n    return s\n\n\ndef _add(i, diff):\n    global B\n    while i <= N:\n        B[i] += diff\n        i += i & -i # plus last 1 bit\n\n\nfor i in range(N):\n    _add(i + 1, A[i])\n\nprint(_sum(7))  # 35\nprint(_sum(4))  # 24\nprint(_sum(1))  # 5\n"})})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},5248:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>l});var t=i(758);const s={},r=t.createContext(s);function a(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);