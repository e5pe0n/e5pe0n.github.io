"use strict";(self.webpackChunke_5_pe_0_n_github_io=self.webpackChunke_5_pe_0_n_github_io||[]).push([[2077],{7094:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>h,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"algorithms/graph-algorithms","title":"Graph Algorithms","description":"Single Source Shortest Paths","source":"@site/docs/algorithms/graph-algorithms.md","sourceDirName":"algorithms","slug":"/algorithms/graph-algorithms","permalink":"/docs/algorithms/graph-algorithms","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"techNoteSidebar","previous":{"title":"Flow Networks","permalink":"/docs/algorithms/flow-algorithms"},"next":{"title":"Mathmatical Algorithms","permalink":"/docs/algorithms/mathmatical-algorithms"}}');var i=s(6070),a=s(5248);const r={},l="Graph Algorithms",h={},d=[{value:"Single Source Shortest Paths",id:"single-source-shortest-paths",level:2},{value:"Bellman-Ford Algorithm",id:"bellman-ford-algorithm",level:3},{value:"Dijkstra&#39;s Algorithm",id:"dijkstras-algorithm",level:3},{value:"All Pairs Shortest Paths",id:"all-pairs-shortest-paths",level:2},{value:"Warshall-Floyd Algorithm",id:"warshall-floyd-algorithm",level:3},{value:"MST: Minimum Spanning Tree",id:"mst-minimum-spanning-tree",level:2},{value:"Kruscal&#39;s Algorithm",id:"kruscals-algorithm",level:3},{value:"Prim&#39;s Algorithm",id:"prims-algorithm",level:3}];function m(n){const e={annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"graph-algorithms",children:"Graph Algorithms"})}),"\n",(0,i.jsx)(e.h2,{id:"single-source-shortest-paths",children:"Single Source Shortest Paths"}),"\n",(0,i.jsx)(e.h3,{id:"bellman-ford-algorithm",children:"Bellman-Ford Algorithm"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"V"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"E"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(\\lvert V \\rvert \\lvert E \\rvert)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"(\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.22222em"},children:"V"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mopen",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"E"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223)"})]})})]})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"detect negative loop"})}),"\n",(0,i.jsxs)(e.li,{children:["relax edges for ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"V"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mo,{children:"\u2212"}),(0,i.jsx)(e.mn,{children:"1"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\lvert V \\rvert - 1"})]})})}),(0,i.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mopen",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.22222em"},children:"V"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(e.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(e.span,{className:"mord",children:"1"})]})]})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"see all vertexes in each loop"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["based on ",(0,i.jsx)(e.em,{children:"triangle inequality"})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"bellman_ford_graph1",src:s(9080).A+"",width:"481",height:"241"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-txt",metastring:'title="test1.txt"',children:"7 10 1 7\n1 2 2\n1 3 5\n2 3 4\n2 4 6\n2 5 10\n3 4 2\n4 6 1\n5 6 3\n5 7 5\n6 7 9\n16\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="C++"',children:'#include <fstream>\n#include <stdio.h>\n#include <vector>\n\n#define MAX_N 10\'000\n#define MAX_K 10\'000\n#define INF 1\'000\'000\'000\n\nusing namespace std;\n\nstruct Edge {\n  int u, v, weight;\n};\n\nint N, K, S, G;\nint dist[MAX_N], path[MAX_N];\nEdge E[MAX_K];\n\nvoid init(int s) {\n  for (int i = 0; i < N; ++i) {\n    dist[i] = INF;\n    path[i] = -1;\n  }\n  dist[s] = 0;\n}\n\nvoid relax(int u, int v, int weight) {\n  if (dist[v] > dist[u] + weight) {\n    dist[v] = dist[u] + weight;\n    path[v] = u;\n  }\n}\n\nbool bellman_ford() {\n  for (int i = 0; i < N - 1; ++i) {\n    for (auto e : E) {\n      relax(e.u, e.v, e.weight);\n    }\n  }\n  for (auto e : E) {\n    if (dist[e.v] > dist[e.u] + e.weight) {\n      return false;\n    }\n  }\n  return true;\n}\n\nvoid print_path(int s, int v) {\n  if (s == v) {\n    printf("%d", s + 1);\n  } else if (v < 0) {\n    printf("\\n No path");\n  } else {\n    print_path(s, path[v]);\n    printf("->%d", v + 1);\n  }\n}\n\nint main() {\n  ifstream ifs("../testset/single_source_shortest_path/test1.txt");\n  ifs >> N >> K >> S >> G;\n  --S;\n  --G;\n  for (int i = 0; i < K * 2; i += 2) {\n    int u, v, weight;\n    ifs >> u >> v >> weight;\n    --u;\n    --v;\n    E[i] = Edge{u, v, weight};\n    E[i + 1] = Edge{v, u, weight};\n  }\n  init(S);\n  if (bellman_ford()) {\n    printf("dist=%d\\n", dist[G]);\n    printf("path=");\n    print_path(S, G);\n    printf("\\n");\n  } else {\n    printf("detect negative loop\\n");\n  }\n}\n\n// dist=16\n// path=1->3->4->6->5->7\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:'title="Python"',children:"INF = float('inf')\n\n\ndef ns(f):\n    return next(f).strip()\n\n\nclass Edge:\n    def __init__(self, u, v, weight):\n        self.u = u\n        self.v = v\n        self.weight = weight\n\n\nwith open(\"../testset/single_source_shortest_path/test1.txt\", 'r') as f:\n    N, K, S, T = map(int, ns(f).split())\n    S -= 1\n    T -= 1\n    E = []\n    for _ in range(K):\n        u, v, weight = map(int, ns(f).split())\n        u -= 1\n        v -= 1\n        E.append(Edge(u, v, weight))\n        E.append(Edge(v, u, weight))\ndist = [INF] * N\ndist[S] = 0\npath = [-1] * N\n\n\ndef relax(u, v, weight):\n    global dist, path\n    if dist[v] > dist[u] + weight:\n        dist[v] = dist[u] + weight\n        path[v] = u\n\n\ndef bellman_ford():\n    # return True if the graph has negative loops.\n    for _ in range(N - 1):\n        for e in E:\n            relax(e.u, e.v, e.weight)\n\n    for e in E:\n        if dist[e.v] < dist[e.u] + e.weight:\n            return False\n    return True\n\n\ndef _print_path(s, v):\n    if s == v:\n        print(s + 1, end='')\n    elif v < 0:\n        print('\\nNo path', end='')\n    else:\n        _print_path(s, path[v])\n        print(f\"->{v + 1}\", end='')\n\n\ndef print_path(s, v):\n    _print_path(s, v)\n    print()\n\n\nbellman_ford()\nprint(f\"shortest distance={dist[T]}\")\nprint(\"shortest path=\", end='')\nprint_path(S, T)\n\n# shortest distance=16\n# shortest path=1->3->4->6->5->7\n"})}),"\n",(0,i.jsx)(e.h3,{id:"dijkstras-algorithm",children:"Dijkstra's Algorithm"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsxs)(e.msup,{children:[(0,i.jsx)(e.mi,{children:"V"}),(0,i.jsx)(e.mn,{children:"2"})]}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(V^2)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"("}),(0,i.jsxs)(e.span,{className:"mord",children:[(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.22222em"},children:"V"}),(0,i.jsx)(e.span,{className:"msupsub",children:(0,i.jsx)(e.span,{className:"vlist-t",children:(0,i.jsx)(e.span,{className:"vlist-r",children:(0,i.jsx)(e.span,{className:"vlist",style:{height:"0.8141em"},children:(0,i.jsxs)(e.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,i.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(e.span,{className:"mord mtight",children:"2"})})]})})})})})]}),(0,i.jsx)(e.span,{className:"mclose",children:")"})]})})]})," -> ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"E"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"o"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"V"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(\\lvert E \\rvert log \\lvert V \\rvert)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"(\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"E"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mopen",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.22222em"},children:"V"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223)"})]})})]})," (used heap queue)"]}),"\n",(0,i.jsxs)(e.li,{children:["use priority queue","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"see only the most nearest vertex"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="C++"',children:'#include <fstream>\n#include <queue>\n#include <stdio.h>\n#include <vector>\n\n#define MAX_N 10\'000\n#define MAX_K 10\'000\n#define INF 1\'000\'000\'000\n\nusing namespace std;\n\ntypedef pair<int, int> P;\n\nstruct Edge {\n  int u, v, weight;\n  Edge(int u, int v, int weight) : u(u), v(v), weight(weight) {}\n};\n\nint N, K, S, T;\nvector<Edge> G[MAX_N];\nint dist[MAX_N], path[MAX_N];\n\nvoid init(int s) {\n  fill(dist, dist + N, INF);\n  fill(path, path + N, -1);\n  dist[s] = 0;\n}\n\nvoid dijkstra(int s) {\n  init(s);\n  priority_queue<P, vector<P>, greater<P>> q;\n  q.push(P(0, s));\n  while (!q.empty()) {\n    P p = q.top();\n    q.pop();\n    int u = p.second;\n    if (dist[u] < p.first) {\n      continue;\n    }\n    for (auto e : G[u]) {\n      if (dist[e.v] > dist[u] + e.weight) {\n        // relax\n        dist[e.v] = dist[u] + e.weight;\n        path[e.v] = u;\n        q.push(P(dist[e.v], e.v));\n      }\n    }\n  }\n}\n\nvoid _print_path(int s, int v) {\n  if (s == v) {\n    printf("%d", s + 1);\n  } else if (v < 0) {\n    printf("No path\\n");\n  } else {\n    _print_path(s, path[v]);\n    printf("->%d", v + 1);\n  }\n}\n\nvoid print_path(int s, int v) {\n  _print_path(s, v);\n  printf("\\n");\n}\n\nint main() {\n  ifstream ifs("../testset/single_source_shortest_path/test1.txt");\n  ifs >> N >> K >> S >> T;\n  --S;\n  --T;\n  for (int i = 0; i < K; ++i) {\n    int u, v, weight;\n    ifs >> u >> v >> weight;\n    --u;\n    --v;\n    G[u].emplace_back(u, v, weight);\n    G[v].emplace_back(v, u, weight);\n  }\n  dijkstra(S);\n  printf("shortest distance=%d\\n", dist[T]);\n  printf("shortest path=");\n  print_path(S, T);\n}\n\n// shortest distance=16\n// shortest path=1->3->4->6->5->7\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:'title="Python"',children:"from heapq import heapify, heappop, heappush\n\n\nINF = float('inf')\n\n\ndef ns(f):\n    return next(f).strip()\n\n\nclass Edge:\n    def __init__(self, u, v, weight):\n        self.u = u\n        self.v = v\n        self.weight = weight\n\n\nwith open(\"../testset/single_source_shortest_path/test1.txt\", 'r') as f:\n    N, K, S, T = map(int, ns(f).split())\n    S -= 1\n    T -= 1\n    G = [[] for _ in range(N)]\n    for _ in range(K):\n        u, v, weight = map(int, ns(f).split())\n        u -= 1\n        v -= 1\n        G[u].append(Edge(u, v, weight))\n        G[v].append(Edge(v, u, weight))\n\ndist = [INF] * N\ndist[S] = 0\npath = [-1] * N\n\n\ndef dijkstra():\n    global dist, path\n    q = [[0, S]]\n    heapify(q)\n    while len(q) > 0:\n        p = heappop(q)\n        u = p[1]\n        if dist[u] < p[0]:\n            continue\n        for e in G[u]:\n            if dist[e.v] > dist[u] + e.weight:\n                dist[e.v] = dist[u] + e.weight\n                path[e.v] = u\n                heappush(q, [dist[e.v], e.v])\n\n\ndef _print_path(s, v):\n    if s == v:\n        print(s + 1, end='')\n    elif v < 0:\n        print('\\nNo path', end='')\n    else:\n        _print_path(s, path[v])\n        print(f\"->{v + 1}\", end='')\n\n\ndef print_path(s, v):\n    _print_path(s, v)\n    print()\n\n\ndijkstra()\nprint(f\"shortest distance={dist[T]}\")\nprint(\"shortest path=\", end='')\nprint_path(S, T)\n\n# shortest distance=16\n# shortest path=1->3->4->6->5->7\n"})}),"\n",(0,i.jsx)(e.h2,{id:"all-pairs-shortest-paths",children:"All Pairs Shortest Paths"}),"\n",(0,i.jsx)(e.h3,{id:"warshall-floyd-algorithm",children:"Warshall-Floyd Algorithm"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["use DP to consider a path from ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mi,{children:"i"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6595em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"i"})]})})]})," to ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mi,{children:"j"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"j"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"})]})})]})," is through ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mi,{children:"k"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]})," or not","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["which more shorter is path through ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mi,{children:"k"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]})," or not"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"all_pairs_shortest_paths",src:s(2710).A+"",width:"475",height:"253"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-txt",metastring:'title="test1.txt"',children:"5 9\n1 2 3\n1 3 8\n1 5 -4\n2 4 1\n2 5 7\n3 2 4\n4 1 2\n4 3 -5\n5 4 6\n0 1 -3 2 -4\n3 0 -4 1 -1\n7 4 0 5 3\n2 -1 -5 0 -2\n8 5 1 6 0\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="C++"',children:'#include <algorithm>\n#include <fstream>\n#include <iostream>\n#include <stdio.h>\n\n#define MAX_N 1\'000\n#define INF 1\'000\'000\'000\n\nusing namespace std;\n\nint N, K;\nint d[MAX_N][MAX_N];\n\nvoid warshall_floyd() {\n  for (int k = 0; k < N; ++k) {\n    for (int i = 0; i < N; ++i) {\n      for (int j = 0; j < N; ++j) {\n        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n      }\n    }\n  }\n}\n\nint main() {\n  ifstream ifs("../testset/all_pairs_shortest_path/test1.txt");\n  ifs >> N >> K;\n  for (int i = 0; i < N; ++i) {\n    for (int j = 0; j < N; ++j) {\n      if (i == j) {\n        d[i][j] = 0;\n      } else {\n        d[i][j] = INF;\n      }\n    }\n  }\n  for (int i = 0; i < K; ++i) {\n    int u, v, weight;\n    ifs >> u >> v >> weight;\n    --u;\n    --v;\n    d[u][v] = weight;\n    // if non-direction graph add d[v][u]\n    // d[v][u] = weight;\n  }\n  warshall_floyd();\n  for (int i = 0; i < N; ++i) {\n    for (int j = 0; j < N; ++j) {\n      printf("%d ", d[i][j]);\n    }\n    printf("\\n");\n  }\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:'title="Python"',children:"INF = float('inf')\n\n\ndef ns(f):\n    return next(f).strip()\n\n\nwith open(\"../testset/all_pairs_shortest_path/test1.txt\", 'r') as f:\n    N, K = map(int, ns(f).split())\n    d = [[0 if i == j else INF for j in range(N)] for i in range(N)]\n    for _ in range(K):\n        u, v, weight = map(int, ns(f).split())\n        u -= 1\n        v -= 1\n        d[u][v] = weight\n        # if non-direction graph add d[v][u]\n        # d[v][u] = weight\n\n\ndef warshall_floyd():\n    global d\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n\n\nwarshall_floyd()\nfor _d in d:\n    print(' '.join(map(str, _d)))\n"})}),"\n",(0,i.jsx)(e.h2,{id:"mst-minimum-spanning-tree",children:"MST: Minimum Spanning Tree"}),"\n",(0,i.jsx)(e.h3,{id:"kruscals-algorithm",children:"Kruscal's Algorithm"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"be similar to Bellman-Ford Algorithm"}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"E"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"o"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"V"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(\\lvert E \\rvert log \\lvert V \\rvert)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"(\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"E"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mopen",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.22222em"},children:"V"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223)"})]})})]})}),"\n",(0,i.jsxs)(e.li,{children:["use ",(0,i.jsx)(e.em,{children:"Union-Find Tree"})]}),"\n",(0,i.jsx)(e.li,{children:"add vertexes of the min weight edge into tree repeatedly if the tree doesn't include the vertexes"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"mst",src:s(5343).A+"",width:"281",height:"241"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-txt",metastring:'title="test1.txt"',children:"7 9\n1 3 1\n2 3 2\n2 5 10\n3 4 3\n3 6 7\n4 6 1\n4 7 5\n5 6 5\n6 7 8\n17\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="C++"',children:'#include <algorithm>\n#include <fstream>\n#include <memory.h>\n#include <stdio.h>\n\n#define MAX_N 10\'000\n#define MAX_K 10\'000\n\nusing namespace std;\n\nstruct Edge {\n  int u, v, weight;\n};\n\nint N, K, ans;\nint par[MAX_N], rnk[MAX_N]{};\nEdge E[MAX_K];\n\nvoid init() {\n  for (int i = 0; i < N; ++i) {\n    par[i] = i;\n  }\n}\n\nint find(int u) {\n  if (par[u] == u) {\n    return u;\n  }\n  return par[u] = find(par[u]);\n}\n\nvoid unite(int u, int v) {\n  u = find(u);\n  v = find(v);\n  if (u == v) {\n    return;\n  }\n  if (rnk[u] < rnk[v]) {\n    par[u] = v;\n  } else {\n    par[v] = u;\n    if (rnk[u] == rnk[v]) {\n      ++rnk[u];\n    }\n  }\n}\n\nbool same(int u, int v) { return find(u) == find(v); }\n\nint kruscal() {\n  int res = 0;\n  sort(E, E + K, [](const Edge &e1, const Edge &e2) { return e1.weight < e2.weight; });\n  init();\n  for (auto e : E) {\n    if (!same(e.u, e.v)) {\n      res += e.weight;\n      unite(e.u, e.v);\n    }\n  }\n  return res;\n}\n\nint main() {\n  ifstream ifs("../testset/minimum_spanning_tree/test1.txt");\n  ifs >> N >> K;\n  for (int i = 0; i < K; ++i) {\n    int u, v, weight;\n    ifs >> u >> v >> weight;\n    E[i] = Edge{--u, --v, weight};\n  }\n  ans = kruscal();\n  printf("%d\\n", ans);\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:'title="Python"',children:"def ns(f):\n    return next(f).strip()\n\n\nclass Edge:\n    def __init__(self, u, v, weight):\n        self.u = u\n        self.v = v\n        self.weight = weight\n\n\nwith open(\"../testset/minimum_spanning_tree/test1.txt\", 'r') as f:\n    N, K = map(int, ns(f).split())\n    E = []\n    for _ in range(K):\n        u, v, weight = map(int, ns(f).split())\n        E.append(Edge(u - 1, v - 1, weight))\n\npar = [i for i in range(N)]\nrnk = [0] * N\n\n\ndef find(u):\n    global par\n    if par[u] == u:\n        return u\n    par[u] = find(par[u])\n    return par[u]\n\n\ndef unite(u, v):\n    global par, rnk\n    u = find(u)\n    v = find(v)\n    if u == v:\n        return\n    if rnk[u] < rnk[v]:\n        par[u] = v\n    else:\n        par[v] = u\n        if rnk[u] == rnk[v]:\n            rnk[u] += 1\n\n\ndef same(u, v):\n    return find(u) == find(v)\n\n\ndef kruscal():\n    res = 0\n    E.sort(key=lambda x: x.weight)\n    for e in E:\n        if not same(e.u, e.v):\n            res += e.weight\n            unite(e.u, e.v)\n    return res\n\n\nans = kruscal()\nprint(ans)\n"})}),"\n",(0,i.jsx)(e.h3,{id:"prims-algorithm",children:"Prim's Algorithm"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"be similar to Dijkstra's Algorithm"}),"\n",(0,i.jsxs)(e.li,{children:["use priority queue -> ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"E"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"l"}),(0,i.jsx)(e.mi,{children:"o"}),(0,i.jsx)(e.mi,{children:"g"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mi,{children:"V"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"\u2223"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(\\lvert E \\rvert log \\lvert V \\rvert)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"(\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"E"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(e.span,{className:"mopen",children:"\u2223"}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.22222em"},children:"V"}),(0,i.jsx)(e.span,{className:"mclose",children:"\u2223)"})]})})]})]}),"\n",(0,i.jsx)(e.li,{children:"add vertex having the shortest distance from added vertexes in the tree into tree repeatedly"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:'title="C++"',children:'#include <fstream>\n#include <queue>\n#include <stdio.h>\n#include <utility>\n#include <vector>\n\n#define MAX_N 10\'000\n#define MAX_K 10\'000\n\nusing namespace std;\n\ntypedef pair<int, int> P;\n\nstruct Edge {\n  int u, v, weight;\n  Edge(int u, int v, int weight) : u(u), v(v), weight(weight) {}\n};\n\nint N, K, ans;\nvector<Edge> G[MAX_N];\nbool used[MAX_N]{};\n\nint prim() {\n  int res = 0;\n  used[0] = true;\n  priority_queue<P, vector<P>, greater<P>> q;\n  for (auto e : G[0]) {\n    q.push(P(e.weight, e.v));\n  }\n  while (!q.empty()) {\n    P p = q.top();\n    q.pop();\n    int u = p.second;\n    if (used[u]) {\n      continue;\n    }\n    used[u] = true;\n    res += p.first;\n    for (auto e : G[u]) {\n      if (!used[e.v]) {\n        q.push(P(e.weight, e.v));\n      }\n    }\n  }\n  return res;\n}\n\nint main() {\n  ifstream ifs("../testset/minimum_spanning_tree/test1.txt");\n  ifs >> N >> K;\n  for (int i = 0; i < K; ++i) {\n    int u, v, weight;\n    ifs >> u >> v >> weight;\n    --u;\n    --v;\n    G[u].emplace_back(u, v, weight);\n    G[v].emplace_back(v, u, weight);\n  }\n  ans = prim();\n  printf("%d\\n", ans);\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:'title="Python"',children:"from heapq import heapify, heappop, heappush\n\n\ndef ns(f):\n    return next(f).strip()\n\n\nclass Edge:\n    def __init__(self, u, v, weight):\n        self.u = u\n        self.v = v\n        self.weight = weight\n\n\nwith open(\"../testset/minimum_spanning_tree/test1.txt\", 'r') as f:\n    N, K = map(int, ns(f).split())\n    G = [[] for _ in range(N)]\n    for _ in range(K):\n        u, v, weight = map(int, ns(f).split())\n        u -= 1\n        v -= 1\n        G[u].append(Edge(u, v, weight))\n        G[v].append(Edge(v, u, weight))\n\nused = [False] * N\n\n\ndef prim():\n    global used\n    res = 0\n    used[0] = True\n    q = [[e.weight, e.v] for e in G[0]]\n    heapify(q)\n    while len(q) > 0:\n        p = heappop(q)\n        u = p[1]\n        if used[u]:\n            continue\n        used[u] = True\n        res += p[0]\n        for e in G[u]:\n            if not used[e.v]:\n                heappush(q, [e.weight, e.v])\n    return res\n\n\nans = prim()\nprint(ans)\n"})})]})}function c(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}},2710:(n,e,s)=>{s.d(e,{A:()=>t});const t=s.p+"assets/images/all_pairs_shortest_paths-746124188f20dc6c4a4c1297ad5f5375.png"},9080:(n,e,s)=>{s.d(e,{A:()=>t});const t=s.p+"assets/images/bellman_ford_graph1-fa6942def07fcdd3359ed70bb2822c9d.png"},5343:(n,e,s)=>{s.d(e,{A:()=>t});const t=s.p+"assets/images/mst-843f584a880401b34562d97c4d7d6e1c.png"},5248:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>l});var t=s(758);const i={},a=t.createContext(i);function r(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);