<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>e5pe0n Tech Note Blog</title>
        <link>https://e5pe0n.github.io/blog</link>
        <description>e5pe0n Tech Note Blog</description>
        <lastBuildDate>Thu, 28 Dec 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Goodbye 2023]]></title>
            <link>https://e5pe0n.github.io/blog/2023/12/28/Goodbye_2023</link>
            <guid>https://e5pe0n.github.io/blog/2023/12/28/Goodbye_2023</guid>
            <pubDate>Thu, 28 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Summary]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="summary">Summary<a href="#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2><ul><li>struggled to improve software development and my career as a software engineer<ul><li>engaged in development as a almost tech-lead</li><li>sought for a new job</li></ul></li><li>consequently got higher point of view to think of software development<ul><li>domain</li><li>project</li><li>software/system design/architecture</li></ul></li><li>finally got a next new job<ul><li>onboarding from Febuary</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="my-2023">My 2023<a href="#my-2023" class="hash-link" aria-label="Direct link to My 2023" title="Direct link to My 2023">​</a></h2><table><thead><tr><th align="center">Month</th><th align="center">Project</th></tr></thead><tbody><tr><td align="center">01-03</td><td align="center">Education Support System for Elementary &amp; Junior High School</td></tr><tr><td align="center">04-12</td><td align="center">Assistant System for Government Cloud Management</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_O99L" id="struggled-to-move-a-project-forward">Struggled to Move a Project Forward<a href="#struggled-to-move-a-project-forward" class="hash-link" aria-label="Direct link to Struggled to Move a Project Forward" title="Direct link to Struggled to Move a Project Forward">​</a></h3><ul><li>project members had been divided into a tech-lead and others; a project manager and other engineers<ul><li>we wanted to make our team more proactive<ul><li>frequent communication</li><li>sharing technical knowledge and enhancing not only individual skills but also entire team's skills</li></ul></li><li>on the other hand, the tech-lead has passive and defensive personality but pride as a tech-lead</li><li>consequently, our team had so many clashes over every decision</li></ul></li><li>i learned<ul><li>just to insist on correct opinions was not a way to improve software development</li><li>need to make good atomosphere and giving team members motivation first to move forward the same goal</li></ul></li><li>under the circumustance, i guessed changing the human mind and the environment are more challenging<ul><li>i felt this suppressed or indifferent atomosphere is charastaristic of my company, not only of my current project<ul><li>in fact most of the team members of the next project are like that too</li></ul></li><li>tended to seek a new environment to work as a software engineer</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="sought-the-next-job">Sought the Next Job<a href="#sought-the-next-job" class="hash-link" aria-label="Direct link to Sought the Next Job" title="Direct link to Sought the Next Job">​</a></h3><ul><li>i began to seek for environment where i can experience and involve in more technical work, also a company encourages me to so that</li><li>but i was rejected over and over again<ul><li>i felt down, there seemed a gap between knowledge i had and experience companies required for me</li><li>especially i found that i focused on micro area in software development such as how to write clean and efficient code, but more macro perspective was required; system design</li><li>i began to study system design and platform services<ul><li><a href="https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/" target="_blank" rel="noopener noreferrer">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a> was a great book for me; it gave me a lot of new things</li><li>there are so many trade-offs between system designs/architectures; so careful consideration is needed to accomplish the demand</li></ul></li><li>many companies require Golang knowledge or experience<ul><li>studied Golang by reading <a href="https://www.gopl.io/" target="_blank" rel="noopener noreferrer">Go Programming Language</a></li></ul></li></ul></li><li>it's been so long time but finally i got a next job; provide platform such as libraries for developers and infrastructure for services; fortunately which really fits what i hoped from the first motivation for job-change</li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="importance-of-domain-knowledge">Importance of Domain Knowledge<a href="#importance-of-domain-knowledge" class="hash-link" aria-label="Direct link to Importance of Domain Knowledge" title="Direct link to Importance of Domain Knowledge">​</a></h3><ul><li>while i'd attempted to design a system over and over, one day i found that it's so important for software engineers to get involved themselves into domain problem<ul><li>good software/system architecture/design is robust to change</li><li>but how do we anticipate to direction to which our software/system will change?</li><li>it's impossible to build software/system flexible to change without domain knowledge</li><li>this fact intrinsically leads us to think about the product value of the software that we're creating, communicating with not only technical persons but also UI/UX design teams, sales department, stakeholders and end users</li></ul></li><li>i began to study DDD from fundamentals by reading <a href="https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/" target="_blank" rel="noopener noreferrer">Domain-Driven Design: Tackling Complexity in the Heart of Software</a><ul><li>i've felt no need to learn DDD until i noticed importance of involving domain because i've thought it's just one of design patterns of OOP</li><li>i think the most important part of DDD is how to model/abstract things we want to implement through the common understanding about a domain; ubiquitous language<ul><li>design pattern of OOP is just one of ways to model/abstract them in DDD</li><li>in fact <a href="https://pragprog.com/titles/swdddf/domain-modeling-made-functional/" target="_blank" rel="noopener noreferrer">Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F#</a> describes how to implement a system based on DDD using functional programming language. it really interested.</li></ul></li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="joined-a-new-profject">Joined a New Profject<a href="#joined-a-new-profject" class="hash-link" aria-label="Direct link to Joined a New Profject" title="Direct link to Joined a New Profject">​</a></h3><ul><li>i left the project of the education support system then joined a new project which develops a system to assist government cloud management from April<ul><li>scrum framework</li><li>there is no tech-lead position in the team but implicitly i was almost that<ul><li>dedicated to decisions about from what languages, libraries and development tools to use, to coding guidelines and software/system design/architecture</li><li>proactively participated in meetings, including such as for operators and for UI/UX design team, to collect and make use of domain knowledge for design and implementation</li><li>document knowledge and decisions to share with team members</li><li>setup CI/CD</li></ul></li></ul></li><li>i learned a lot of new things from infrastructure and backend to frontend<ul><li>scrum<ul><li>i've experienced scrum development but strictly following the framework under scrum coaches is for the first time</li></ul></li><li>GCP</li><li>Terraform<ul><li>CDKTF (TypeScript)</li></ul></li><li>monorepo using Turborepo</li><li>Node.js</li><li>Next.js<ul><li>React Server Components</li></ul></li><li>Figma</li><li>ADRs</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="advent-of-code">Advent of Code<a href="#advent-of-code" class="hash-link" aria-label="Direct link to Advent of Code" title="Direct link to Advent of Code">​</a></h3><ul><li>joined for the first time</li><li>fun but hard work to solve a problem everyday</li><li>couldn't solve 5, 6 or so problems</li><li>given motivation to study algorithms again</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="2024-resolutions">2024 Resolutions<a href="#2024-resolutions" class="hash-link" aria-label="Direct link to 2024 Resolutions" title="Direct link to 2024 Resolutions">​</a></h2><ul><li>good luck and have fun!<ul><li>honestly i'm hopeful but also very nervous at the same time</li><li>don't forget having fun; everything follows that!</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="books">Books<a href="#books" class="hash-link" aria-label="Direct link to Books" title="Direct link to Books">​</a></h2><h3 class="anchor anchorWithStickyNavbar_O99L" id="done-reading-newly">Done Reading Newly<a href="#done-reading-newly" class="hash-link" aria-label="Direct link to Done Reading Newly" title="Direct link to Done Reading Newly">​</a></h3><ul><li><a href="https://www.amazon.co.jp/-/en/John-Ousterhout/dp/173210221X" target="_blank" rel="noopener noreferrer">A Philosophy of Software Design</a></li><li><a href="https://www.amazon.co.jp/-/en/Alex-Xu/dp/B08CMF2CQF" target="_blank" rel="noopener noreferrer">System Design Interview</a></li><li><a href="https://csapp.cs.cmu.edu/" target="_blank" rel="noopener noreferrer">Computer Systems; A Programmer's Perspective</a></li><li><a href="https://www.gopl.io/" target="_blank" rel="noopener noreferrer">Go Programming Language</a></li><li><a href="https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/" target="_blank" rel="noopener noreferrer">Domain-Driven Design: Tackling Complexity in the Heart of Software</a></li><li><a href="https://pragprog.com/titles/swdddf/domain-modeling-made-functional/" target="_blank" rel="noopener noreferrer">Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F#</a></li><li><a href="https://www.amazon.co.jp/-/en/Ben-Piper/dp/1119982626" target="_blank" rel="noopener noreferrer">AWS Certified Solutions Architect Study Guide: AWS Certified Solutions Architect Study Guide: Associate (SAA-C03) Exam</a></li><li><a href="https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/" target="_blank" rel="noopener noreferrer">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="done-reading-again">Done Reading Again<a href="#done-reading-again" class="hash-link" aria-label="Direct link to Done Reading Again" title="Direct link to Done Reading Again">​</a></h3><ul><li><a href="https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/" target="_blank" rel="noopener noreferrer">Clean Architecture: A Craftsman's Guide to Software Structure and Design</a></li><li><a href="https://www.oreilly.com/library/view/the-pragmatic-programmer/9780135956977/" target="_blank" rel="noopener noreferrer">The Pragmatic Programmer: your journey to mastery (20th Anniversary Edition)</a></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="reading">Reading<a href="#reading" class="hash-link" aria-label="Direct link to Reading" title="Direct link to Reading">​</a></h3><ul><li><a href="https://www.nodejsdesignpatterns.com/" target="_blank" rel="noopener noreferrer">Node.js Design Pattern</a></li><li><a href="https://nostarch.com/howlinuxworks3" target="_blank" rel="noopener noreferrer">How Linux Works (3rd Ed.)</a></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="stacked">Stacked<a href="#stacked" class="hash-link" aria-label="Direct link to Stacked" title="Direct link to Stacked">​</a></h3><ul><li><a href="https://eopl3.com/" target="_blank" rel="noopener noreferrer">Essentials of Programming Languages</a></li><li><a href="http://www2.math.umd.edu/~jcohen/402/Pinter%20Algebra.pdf" target="_blank" rel="noopener noreferrer">A Book of Abstract Algebra</a></li><li><a href="https://www.oreilly.com/library/view/mythical-man-month-the/0201835959/" target="_blank" rel="noopener noreferrer">Mythical Man-Month, The: Essays on Software Engineering (Anniversary Edition)</a></li><li><a href="https://www.oreilly.com/library/view/release-it-2nd/9781680504552/" target="_blank" rel="noopener noreferrer">Release It!: Design and Deploy Production-Ready Software (2nd Ed.)</a></li><li><a href="https://www.oreilly.com/library/view/sql-antipatterns/9781680500073/" target="_blank" rel="noopener noreferrer">SQL Antipatterns: Avoiding the Pitfalls of Database Programming</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202304-05]]></title>
            <link>https://e5pe0n.github.io/blog/2023/06/05/202305_Log</link>
            <guid>https://e5pe0n.github.io/blog/2023/06/05/202305_Log</guid>
            <pubDate>Mon, 05 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Job]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="job">Job<a href="#job" class="hash-link" aria-label="Direct link to Job" title="Direct link to Job">​</a></h2><ul><li>Scrum<ul><li>joined scrum training<ul><li>i had once but i had forgot many elemental things  </li></ul></li></ul></li></ul><ul><li><p>TypeScript</p><ul><li>i have really good development experience</li><li>strong static analysis<ul><li>type errors, suggestions, etc.</li></ul></li><li>structual typing<ul><li>flexble to use</li></ul></li><li>functional style<ul><li>i wish JS supports more functional features<ul><li>lazy evaluation on functions such as <code>map()</code> and <code>filter()</code></li><li>if expression, switch expression  </li></ul></li></ul></li></ul></li><li><p>GCP</p><ul><li>Firebase<ul><li>i hadn't touch it although i knew the name</li><li>seems easier to use for simple web apps than using aws</li></ul></li><li>i feel it is simpler than aws<ul><li>i don't know that is beacuse i've used aws or aws is complex</li></ul></li></ul></li></ul><ul><li><p>GitHub Actions</p><ul><li>parallelized jobs to shorten elapsed time</li></ul></li><li><p>GraphQL</p><ul><li>tried tutorials of <a href="https://www.apollographql.com/" target="_blank" rel="noopener noreferrer">Apollo</a></li><li>can we get better development experience using GraphQL with TS?<ul><li>typing by TS and GraphQL is duplicate</li><li>i feel TS might be enough for type validation<ul><li>after all we have to runtime-validations for values too</li></ul></li><li>at least i feel introducing GraphQL doesn't match the cost for the current system</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="others">Others<a href="#others" class="hash-link" aria-label="Direct link to Others" title="Direct link to Others">​</a></h2><ul><li>i wanna change my job soon<ul><li>i had no offers still now...</li><li>i wanna develop softwares more technically difficult<ul><li>bored now</li></ul></li><li>recently also interested in infrastructures<ul><li>IaC, system architectures</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progress">In Progress<a href="#in-progress" class="hash-link" aria-label="Direct link to In Progress" title="Direct link to In Progress">​</a></h2><ul><li><a href="https://github.com/adonovan/gopl.io/" target="_blank" rel="noopener noreferrer">Go Programming Language</a><ul><li>started learning golang because there are many company adopt golang</li><li>workspace repo: <a href="https://github.com/e5pe0n/gpl" target="_blank" rel="noopener noreferrer">https://github.com/e5pe0n/gpl</a></li><li>Chapter 1 - 7<ul><li>done!</li></ul></li><li>for me<ul><li>golang is not simple at all as others say so<ul><li>pointers</li><li>goroutines and channels</li></ul></li><li>i've thought that golang was a low-layer language like C/C++ but was made more easier to treat, but that was wrong; it's high-level language than i think so, truly general perpose language<ul><li>standard library looks large and enough to develop web app</li></ul></li><li>one of the good candidates in static typed languages for web app<ul><li>prep to dev is easy; batteries included<ul><li>package manager, linter, formatter, etc.</li></ul></li><li>ecosystem and support from vendors is sufficient<ul><li>libraries, cdk, sdk, etc</li></ul></li><li>performance</li><li>compiled to executable binary<ul><li>no need something like JVM</li></ul></li><li>good compatible to docker containers</li></ul></li><li>i hadn't liked golang, and i don't like it now too even my perspective for golang was changed<ul><li>there are too many places side-effects occur<ul><li>hard to track procedures correctly<ul><li>the more i learn golang, the more i wanna use rust  </li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><ul><li><a href="https://www.amazon.co.jp/-/en/Randal-Bryant-ebook/dp/B09HPD9QBW/" target="_blank" rel="noopener noreferrer">Computer Systems: A Programmer's Perspective</a>  <ul><li>Chapter 3 - 8<ul><li>done reading!</li><li>it seams more clearer about low layer than before <ul><li>processor architectures</li><li>memory systems<ul><li>registers</li><li>L1-L3 cache</li></ul></li><li>exceptions</li></ul></li></ul></li><li>Chapter 9. Virtual Memory<ul><li>very important but also too difficult</li><li>mechanism of translation from virtual memory to physical memory is too complicated</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="push-onto-the-stack">Push onto the Stack<a href="#push-onto-the-stack" class="hash-link" aria-label="Direct link to Push onto the Stack" title="Direct link to Push onto the Stack">​</a></h2><p>honestly i don't wanna push these onto the stack but skills to be able to use instantly needed now for recruit.</p><ul><li><p><a href="https://eopl3.com/" target="_blank" rel="noopener noreferrer">Essentials of Programming Languages</a></p><ul><li>done!<ul><li>Chapter 6. Continuation-Passing Style</li><li>Chapter 7. Types</li></ul></li><li>in progress<ul><li>Chapter 8. Modules</li></ul></li></ul></li><li><p><a href="https://www.amazon.co.jp/-/en/Charles-C-Pinter-ebook/dp/B00VDGA1JA" target="_blank" rel="noopener noreferrer">A Book of Abstract Algebra</a></p><ul><li>done!<ul><li>Chapter 8. Permutations of Finite Set</li><li>Chapter 9. Isomorphism</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li><p>competitive programming</p></li><li><p>implementing something in Rust</p></li><li><p>implementing something in Go</p></li><li><p><a href="https://www.amazon.co.jp/-/en/Mark-Richards-ebook/dp/B0849MPK73" target="_blank" rel="noopener noreferrer">Fundamentals of Software Architecture: An Engineering Approach</a></p></li><li><p><a href="https://www.amazon.co.jp/-/en/Graham-Hutton-ebook/dp/B01JGMEA3U" target="_blank" rel="noopener noreferrer">Programming in Haskell</a></p></li><li><p><a href="https://www.amazon.co.jp/-/en/Alex-Petrov-ebook/dp/B07XW76VHZ" target="_blank" rel="noopener noreferrer">Database Internals</a></p></li><li><p>develop my blog site</p></li><li><p>develop english learning site</p></li><li><p><a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/" target="_blank" rel="noopener noreferrer">The Pragmatic Programmer</a></p></li><li><p><a href="https://www.amazon.co.jp/-/en/Bill-Karwin-ebook/dp/B00A376BB2" target="_blank" rel="noopener noreferrer">SQL Antipatterns: Avoiding the Pitfalls of Database Programming</a>  </p></li><li><p><a href="https://www.amazon.co.jp/-/en/Michael-T-Nygard/dp/1680502395" target="_blank" rel="noopener noreferrer">Release It!</a>  </p></li><li><p><a href="https://www.amazon.co.jp/-/en/Avram-Joel-Spolsky/dp/1590593898/" target="_blank" rel="noopener noreferrer">Jeol on Software</a></p></li><li><p><a href="https://www.amazon.co.jp/-/en/Frederick-P-Brooks-Jr-ebook/dp/B00B8USS14" target="_blank" rel="noopener noreferrer">Mythical Man-Month</a></p></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>Kanojo Wa Tabinideru / Sana</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202303]]></title>
            <link>https://e5pe0n.github.io/blog/2023/03/05/202303_Log</link>
            <guid>https://e5pe0n.github.io/blog/2023/03/05/202303_Log</guid>
            <pubDate>Sun, 05 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Others]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="others">Others<a href="#others" class="hash-link" aria-label="Direct link to Others" title="Direct link to Others">​</a></h2><ul><li><a href="https://www.amazon.co.jp/-/en/Alex-Xu-ebook/dp/B08B3FWYBX" target="_blank" rel="noopener noreferrer">System Design Interview</a><ul><li>done reading!</li><li>recently i've watched <a href="https://www.youtube.com/@ByteByteGo" target="_blank" rel="noopener noreferrer">ByteByteGo</a>'s videos<ul><li>systems, architectures and algorithms used internally are insteresting</li><li>the videos also give some real use cases</li></ul></li><li>interested to know how real companies design and devise systems</li><li>increased ideas of system design</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progress">In Progress<a href="#in-progress" class="hash-link" aria-label="Direct link to In Progress" title="Direct link to In Progress">​</a></h2><ul><li><a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/" target="_blank" rel="noopener noreferrer">The Pragmatic Programmer</a><ul><li>reading before sleeping everyday</li><li>don't forget basics</li></ul></li></ul><ul><li><p><a href="https://eopl3.com/" target="_blank" rel="noopener noreferrer">Essentials of Programming Languages</a></p><ul><li>Chapter 5. Continuation-Passing Interpreter done!</li></ul></li><li><p><a href="https://www.amazon.co.jp/-/en/Charles-C-Pinter-ebook/dp/B00VDGA1JA" target="_blank" rel="noopener noreferrer">A Book of Abstract Algebra</a></p><ul><li>Chapter 8. Permutations of Finite Set</li></ul></li></ul><ul><li><a href="https://www.amazon.co.jp/-/en/Randal-Bryant-ebook/dp/B09HPD9QBW/" target="_blank" rel="noopener noreferrer">Computer Systems: A Programmer's Perspective</a>  <ul><li>Part I. Program Structure and Execution<ul><li>Chapter 2. Representing and Manipulating Information</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="pop-from-stack">Pop from Stack<a href="#pop-from-stack" class="hash-link" aria-label="Direct link to Pop from Stack" title="Direct link to Pop from Stack">​</a></h2><ul><li><a href="https://www.amazon.co.jp/-/en/Alex-Xu-ebook/dp/B08B3FWYBX" target="_blank" rel="noopener noreferrer">System Design Interview</a></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="push-onto-stack">Push onto Stack<a href="#push-onto-stack" class="hash-link" aria-label="Direct link to Push onto Stack" title="Direct link to Push onto Stack">​</a></h2><ul><li><p><a href="https://www.amazon.co.jp/-/en/Bill-Karwin-ebook/dp/B00A376BB2" target="_blank" rel="noopener noreferrer">SQL Antipatterns: Avoiding the Pitfalls of Database Programming</a>  </p></li><li><p><a href="https://www.amazon.co.jp/-/en/Michael-T-Nygard/dp/1680502395" target="_blank" rel="noopener noreferrer">Release It!</a>  </p></li><li><p><a href="https://www.amazon.co.jp/-/en/Avram-Joel-Spolsky/dp/1590593898/" target="_blank" rel="noopener noreferrer">Jeol on Software</a></p></li><li><p><a href="https://www.amazon.co.jp/-/en/Frederick-P-Brooks-Jr-ebook/dp/B00B8USS14" target="_blank" rel="noopener noreferrer">Mythical Man-Month</a></p></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li>competitive programming<ul><li>i have to remember math and how to write code!</li></ul></li><li>implementing something in Rust</li><li><a href="https://www.amazon.co.jp/-/en/Alex-Xu-ebook/dp/B08B3FWYBX" target="_blank" rel="noopener noreferrer">System Design Interview</a></li><li><a href="https://www.amazon.co.jp/-/en/Mark-Richards-ebook/dp/B0849MPK73" target="_blank" rel="noopener noreferrer">Fundamentals of Software Architecture: An Engineering Approach</a></li><li><a href="https://www.amazon.co.jp/-/en/Graham-Hutton-ebook/dp/B01JGMEA3U" target="_blank" rel="noopener noreferrer">Programming in Haskell</a></li><li><a href="https://www.amazon.co.jp/-/en/Alex-Petrov-ebook/dp/B07XW76VHZ" target="_blank" rel="noopener noreferrer">Database Internals</a></li><li><a href="https://www.amazon.co.jp/-/en/David-Patterson-ebook/dp/B08QRX7412" target="_blank" rel="noopener noreferrer">Computer Organization and Design MIPS Edition: The Hardware/Software Interface (6th Ed.)</a></li><li><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener noreferrer">The Architecture of Open Source Applications</a></li><li>develop my blog site</li><li>develop english learning site</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>Karakara / kessoku band</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202302]]></title>
            <link>https://e5pe0n.github.io/blog/2023/02/24/202302_Log</link>
            <guid>https://e5pe0n.github.io/blog/2023/02/24/202302_Log</guid>
            <pubDate>Fri, 24 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Job]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="job">Job<a href="#job" class="hash-link" aria-label="Direct link to Job" title="Direct link to Job">​</a></h2><ul><li>implemented technically difficult features<ul><li>write script to tokenize python code then remove parts of code temporally when migrating the database using postgres_fdw</li><li>read the public form from the excel file then render as a form on web page</li><li>using opencv-python to align the preview image of the public form</li></ul></li><li>reviewed PRs from team members<ul><li>i committed as both main implementer and main reviewer, but this was bad idea</li><li>because the workload overflowed my capacity and i myself didn't have the right to determine specification</li></ul></li><li>deployed new features to staging environment<ul><li>a lot of bugs found when integrating frontend and backend</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="others">Others<a href="#others" class="hash-link" aria-label="Direct link to Others" title="Direct link to Others">​</a></h2><ul><li><p>i couldn't do self-education enough in January and February, my job was too busy for release</p><ul><li>i'm really tired, on both physically and mentally</li></ul></li><li><p>current my team is not a team, just a black company</p><ul><li>current tech lead is a client, and other implementers are just labor to deliver any product from code to documentations to him</li><li>i wanted to share technical knowledge and talk about it more, make effective our development more, and have fun more above all</li><li>i'm sure that i did my best; i implemented technically difficult parts, helped my team members develop, and that actually committed to the release. but why i have such a sad feeling...</li></ul></li><li><p>determined move me to other project</p><ul><li>i agreed to that because it didn't seem that i can learn anything more, leverage my skill, and enjoy the development in the current team</li><li>also i feel stuck, the experience in other project might be need for me to extend my perspective</li></ul></li><li><p>i'm seeking the next job</p><ul><li>applied for about 15 company, but i haven't have any offers now...<ul><li>almost all of them were dropped at screening process</li><li>i'm really feeling that i'm inexperienced, unskilled, behind, indifferent, and ignorant...</li><li>but it was worth to apply for recruitments, i could know current my actual values</li></ul></li><li>first of all i haven't been able to find jobs i interested in at all<ul><li>business/services<ul><li>i wanna work in the field such as science and technology</li><li>recruitments of companies in these fields are really less and require high education and skills</li></ul></li><li>techs<ul><li>languages used by almost all web company are Java, PHP, Ruby and Go</li><li>i can't have interest on them at all...</li></ul></li></ul></li></ul></li><li><p><a href="https://www.amazon.co.jp/-/en/John-K-Ousterhout-ebook/dp/B09B8LFKQL" target="_blank" rel="noopener noreferrer">A Philosophy of Software Design</a></p><ul><li>done reading!</li></ul></li><li><p><a href="https://www.amazon.co.jp/-/en/Jason-Cannon-ebook/dp/B015FZAXU6" target="_blank" rel="noopener noreferrer">Shell Scripting</a></p><ul><li>done reading!</li><li>examples and exercises: <a href="https://github.com/e5pe0n/ss" target="_blank" rel="noopener noreferrer">https://github.com/e5pe0n/ss</a></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progress">In Progress<a href="#in-progress" class="hash-link" aria-label="Direct link to In Progress" title="Direct link to In Progress">​</a></h2><p>i'm being stuck and confused about what i should learn or what i wanna learn.<br>
<!-- -->should list up and put priority them.  </p><ul><li><a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/" target="_blank" rel="noopener noreferrer">The Pragmatic Programmer</a><ul><li>reading before sleeping everyday</li><li>don't forget basics</li></ul></li></ul><ul><li><p><a href="https://eopl3.com/" target="_blank" rel="noopener noreferrer">Essentials of Programming Languages</a></p><ul><li>Chapter 5. Continuation-Passing Interpreter<ul><li>5.5 Thread</li></ul></li></ul></li><li><p><a href="https://www.amazon.co.jp/-/en/Charles-C-Pinter-ebook/dp/B00VDGA1JA" target="_blank" rel="noopener noreferrer">A Book of Abstract Algebra</a></p><ul><li>Chapter 8. Permutations of Finite Set</li></ul></li></ul><ul><li><a href="https://www.amazon.co.jp/-/en/Randal-Bryant-ebook/dp/B09HPD9QBW/" target="_blank" rel="noopener noreferrer">Computer Systems: A Programmer's Perspective</a>  <ul><li>Part I. Program Structure and Execution<ul><li>Chapter 2. Representing and Manipulating Information</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="pop-from-stack">Pop from Stack<a href="#pop-from-stack" class="hash-link" aria-label="Direct link to Pop from Stack" title="Direct link to Pop from Stack">​</a></h2><ul><li><a href="https://www.amazon.co.jp/-/en/Alex-Xu-ebook/dp/B08B3FWYBX" target="_blank" rel="noopener noreferrer">System Design Interview</a></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="push-onto-stack">Push onto Stack<a href="#push-onto-stack" class="hash-link" aria-label="Direct link to Push onto Stack" title="Direct link to Push onto Stack">​</a></h2><ul><li><p><a href="https://www.amazon.co.jp/-/en/Bill-Karwin-ebook/dp/B00A376BB2" target="_blank" rel="noopener noreferrer">SQL Antipatterns: Avoiding the Pitfalls of Database Programming</a>  </p></li><li><p><a href="https://www.amazon.co.jp/-/en/Michael-T-Nygard/dp/1680502395" target="_blank" rel="noopener noreferrer">Release It!</a>  </p></li><li><p><a href="https://www.amazon.co.jp/-/en/Avram-Joel-Spolsky/dp/1590593898/" target="_blank" rel="noopener noreferrer">Jeol on Software</a></p></li><li><p><a href="https://www.amazon.co.jp/-/en/Frederick-P-Brooks-Jr-ebook/dp/B00B8USS14" target="_blank" rel="noopener noreferrer">Mythical Man-Month</a></p></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li>competitive programming<ul><li>i have to remember math and how to write code!</li></ul></li><li>implementing something in Rust</li><li><a href="https://www.amazon.co.jp/-/en/Alex-Xu-ebook/dp/B08B3FWYBX" target="_blank" rel="noopener noreferrer">System Design Interview</a></li><li><a href="https://www.amazon.co.jp/-/en/Mark-Richards-ebook/dp/B0849MPK73" target="_blank" rel="noopener noreferrer">Fundamentals of Software Architecture: An Engineering Approach</a></li><li><a href="https://www.amazon.co.jp/-/en/Graham-Hutton-ebook/dp/B01JGMEA3U" target="_blank" rel="noopener noreferrer">Programming in Haskell</a></li><li><a href="https://www.amazon.co.jp/-/en/Alex-Petrov-ebook/dp/B07XW76VHZ" target="_blank" rel="noopener noreferrer">Database Internals</a></li><li><a href="https://www.amazon.co.jp/-/en/David-Patterson-ebook/dp/B08QRX7412" target="_blank" rel="noopener noreferrer">Computer Organization and Design MIPS Edition: The Hardware/Software Interface (6th Ed.)</a></li><li><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener noreferrer">The Architecture of Open Source Applications</a></li><li>develop my blog site</li><li>develop english learning site</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>Karakara / kessoku band</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202212]]></title>
            <link>https://e5pe0n.github.io/blog/2022/12/17/202212_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/12/17/202212_Log</guid>
            <pubDate>Sat, 17 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li><p>Implementation and Review</p><ul><li>managed to both implement for assigned tasks to me and review PRs at the same time!</li><li>felt like surely this is the ideal form for team development<ul><li>respect the programs we write, got some new things from them and develop us each other</li></ul></li></ul></li><li><p>Learned infrastructure and services</p><ul><li>using these below somehow but I understood exactly what these are doing at last<ul><li>AWS copilot</li><li>serverless<ul><li>serveless-next.js</li></ul></li></ul></li><li>learned details to improve our development environment<ul><li>docker</li><li>docker compose</li></ul></li></ul></li><li><p>React</p><ul><li>got to care about rendering count in these days<ul><li>considering trade off between benefits of declarative (functional) style and performance</li></ul></li><li>after all we just treat DOMs somehow</li><li>react is a great library but not being always the best choice for the project<ul><li>i had been depending on and stick to react </li><li>need thinking beyond libraries/frameworks<ul><li>like considering programming languages about not only syntax and built-in functions for easiness to write programs but also performance and implementation details</li></ul></li></ul></li></ul></li><li><p><em>Essentials of Programming Languages</em></p><ul><li>Chapter 5. Continuation-Passing Interpreter<ul><li>5.3 An Imperative Interpreter done!</li><li>5.4 Exceptions done!</li></ul></li></ul></li><li><p><em>A Book of Abstract Algebra</em></p><ul><li>Chapter 7. Groups of Permutations done!</li></ul></li><li><p><em>Jeol on Software</em></p><ul><li>started reading due to hearing that an engineer I respect read and have been influenced by this book<ul><li>this book is old a bit so some things said may be token for granted in these day</li><li>but foundation, the bottom of thinking how to solve the problems on software development is still alive, there are many things I should reap to develop me</li></ul></li><li>1/3 done reading!</li></ul></li><li><p><em>Computer Systems: A Programmer's Perspective</em></p><ul><li>maybe mostly reviewing the basics for programming<ul><li>the phrase <em>programmer's perspective</em> fascinated me</li><li>there may be some new discoveries</li></ul></li><li>Chapter 1 done reading!<ul><li>learned abstraction/concept of computer systems</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progreess">In Progreess<a href="#in-progreess" class="hash-link" aria-label="Direct link to In Progreess" title="Direct link to In Progreess">​</a></h2><ul><li><p><em>Essentials of Programming Languages</em></p><ul><li>Chapter 5. Continuation-Passing Interpreter</li></ul></li><li><p><em>A Book of Abstract Algebra</em></p><ul><li>Chapter 8. Permutations of Finite Sets</li></ul></li></ul><ul><li><p><em>Jeol on Software</em></p></li><li><p><em>Computer Systems: A Programmer's Perspective</em></p></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li><p><a href="https://github.com/e5pe0n/rust-sandbox/tree/main/todo_list" target="_blank" rel="noopener noreferrer">todo list</a></p><ul><li>practice rust</li><li>i wanna use macro to implement command line arguments parser just by defining command options</li></ul></li><li><p><em>Programming in Haskell</em></p></li><li><p><em>SQL Antipatterns: Avoiding the Pitfalls of Database Programming</em></p></li><li><p><em>Database Internals</em></p></li><li><p><em>Computer Organization and Design MIPS Edition: The Hardware/Software Interface (6th ed.)</em></p></li><li><p><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener noreferrer"><em>The Architecture of Open Source Applications</em></a></p></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>Lagtraing / INABAKUMORI</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Goodbye 2022]]></title>
            <link>https://e5pe0n.github.io/blog/2022/12/17/Goodbye_2022</link>
            <guid>https://e5pe0n.github.io/blog/2022/12/17/Goodbye_2022</guid>
            <pubDate>Sat, 17 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Review]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="review">Review<a href="#review" class="hash-link" aria-label="Direct link to Review" title="Direct link to Review">​</a></h2><ul><li>implemented over and over<ul><li>got speed up to implement<ul><li>built patterns of how to implement in my mind</li></ul></li><li>implemented technically difficult parts<ul><li>made use of writing scheme to implement algorithms that recursion is needed</li><li>improve implementation considering the time complexity and the number of rendering</li></ul></li><li>reviewed PRs at the same time<ul><li>led the team in terms of implementation</li></ul></li></ul></li></ul><ul><li>thought team development<ul><li>reviewed PRs<ul><li>thinking not only how to correct implementation but also how to keep motivation of team members</li><li>just pointing out the causes and solutions of the problem is not enough to solve the problem</li></ul></li><li>writing docs for team members<ul><li>implementation guides<ul><li>patterns/recipes</li><li>pitfalls/points to care</li><li>tips</li><li>about<ul><li>python</li><li>ts/js</li><li>react</li></ul></li></ul></li></ul></li></ul></li></ul><ul><li>wrote raw sqls<ul><li>data migration<ul><li>optimized sqls written by other teammate</li></ul></li><li>query too complex to write in ORM query<ul><li>made implementation more efficient, solved lazy reponse problem</li></ul></li></ul></li></ul><ul><li>considered compatibility<ul><li>fixed bugs that occur on only some browsers or devices</li><li>browsers<ul><li>Chrome, Edge or Safari?</li></ul></li><li>devices<ul><li>iPad or Surfface?</li></ul></li></ul></li></ul><ul><li>wrote a lot of tests<ul><li>struggled writing tests<ul><li>took much more time than implementing the feature</li></ul></li><li>writing tests was hard work but it gave me deeper understanding of the using language, framework, library and developing the system</li><li>keep tests as simple and less as possible<ul><li>maintaining tests is one of costs of development</li></ul></li></ul></li></ul><ul><li>thought about the gap between ideal and real<ul><li>compromise as much as you can<ul><li>obey the KISS principle</li><li>don't make features more rich than requirements</li><li>maybe implmenting them would be fun and get clients happy, but otherwise you have to write more tests and maintain the features and implementations work correctly considering compatibility to other features</li></ul></li></ul></li></ul><ul><li>encountered N + 1 problem<ul><li>i had just hear the name, not understood what it is but finally i realized the problem along with experience of my failure</li><li>swear never cause it again!</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="librariesframeworks">Libraries/Frameworks<a href="#librariesframeworks" class="hash-link" aria-label="Direct link to Libraries/Frameworks" title="Direct link to Libraries/Frameworks">​</a></h2><h3 class="anchor anchorWithStickyNavbar_O99L" id="frontend">Frontend<a href="#frontend" class="hash-link" aria-label="Direct link to Frontend" title="Direct link to Frontend">​</a></h3><h4 class="anchor anchorWithStickyNavbar_O99L" id="chakra-ui"><a href="https://chakra-ui.com/" target="_blank" rel="noopener noreferrer">Chakra UI</a><a href="#chakra-ui" class="hash-link" aria-label="Direct link to chakra-ui" title="Direct link to chakra-ui">​</a></h4><ul><li>simpler and easier to use than MUI</li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="swr"><a href="https://swr.vercel.app/" target="_blank" rel="noopener noreferrer">SWR</a><a href="#swr" class="hash-link" aria-label="Direct link to swr" title="Direct link to swr">​</a></h4><ul><li>make data fetching and state managiment easy</li><li>graduated from fetching in <code>useEffect()</code></li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="react-hook-form"><a href="https://react-hook-form.com/" target="_blank" rel="noopener noreferrer">React Hook Form</a><a href="#react-hook-form" class="hash-link" aria-label="Direct link to react-hook-form" title="Direct link to react-hook-form">​</a></h4><ul><li>make implementation of forms in React easy</li><li>good performance<ul><li>suppress re-rendering as less as possible</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="react-testing-library"><a href="https://testing-library.com/docs/react-testing-library/intro/" target="_blank" rel="noopener noreferrer">React Testing Library</a><a href="#react-testing-library" class="hash-link" aria-label="Direct link to react-testing-library" title="Direct link to react-testing-library">​</a></h4><ul><li>tools to test react components basically at point of view of UX, not implementation details</li><li>learned how to use correctly</li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="tanstack-table-react-table"><a href="https://tanstack.com/table/v8" target="_blank" rel="noopener noreferrer">Tanstack Table (React Table)</a><a href="#tanstack-table-react-table" class="hash-link" aria-label="Direct link to tanstack-table-react-table" title="Direct link to tanstack-table-react-table">​</a></h4><ul><li>headless UI<ul><li>does not touch the appearance/design of table component</li><li>just attaches useful features such as sort and filter</li></ul></li><li>learned how to implement tables with search form</li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="nextjs"><a href="https://nextjs.org/" target="_blank" rel="noopener noreferrer">Next.js</a><a href="#nextjs" class="hash-link" aria-label="Direct link to nextjs" title="Direct link to nextjs">​</a></h4><ul><li>honestly not understanding deeper yet</li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="serverless-nextjs"><a href="https://www.serverless.com/plugins/serverless-nextjs-plugin" target="_blank" rel="noopener noreferrer">serverless-next.js</a><a href="#serverless-nextjs" class="hash-link" aria-label="Direct link to serverless-nextjs" title="Direct link to serverless-nextjs">​</a></h4><ul><li>make deploying next.js using AWS resources easy<ul><li>automatically build a stack including S3, Lambda@Edge, and CloudFront</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="zod"><a href="https://zod.dev/" target="_blank" rel="noopener noreferrer">Zod</a><a href="#zod" class="hash-link" aria-label="Direct link to zod" title="Direct link to zod">​</a></h4><ul><li>TypeScript-first data validation library</li><li>i wanna use Zod as form validation too but Zod doesn't provide kind of label or alias feature</li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="yup"><a href="https://github.com/jquense/yup" target="_blank" rel="noopener noreferrer">yup</a><a href="#yup" class="hash-link" aria-label="Direct link to yup" title="Direct link to yup">​</a></h4><ul><li>Schema-base form validation library</li><li>type inference is weaker than Zod</li><li>providing labeling feature to replace property name with the label in error message<ul><li>more useful for form validation than Zod</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="backend">Backend<a href="#backend" class="hash-link" aria-label="Direct link to Backend" title="Direct link to Backend">​</a></h3><h4 class="anchor anchorWithStickyNavbar_O99L" id="django"><a href="https://www.djangoproject.com/" target="_blank" rel="noopener noreferrer">Django</a><a href="#django" class="hash-link" aria-label="Direct link to django" title="Direct link to django">​</a></h4><ul><li>monolithic web app framework</li><li>i don't like monolithic<ul><li>especially ORM query<ul><li>why do i have to write raw sqls then struggle to rewrite them in ORM query?</li></ul></li><li>i wanna combine simple and useful tools in my favor</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="fastapi"><a href="https://fastapi.tiangolo.com/" target="_blank" rel="noopener noreferrer">FastAPI</a><a href="#fastapi" class="hash-link" aria-label="Direct link to fastapi" title="Direct link to fastapi">​</a></h4><ul><li>light and fast web app framework</li><li>i prefer this to Django<ul><li>simpler and i can use SQLAlchemy for query</li><li>but i don't like to use python to implement web app in the first place</li></ul></li><li>using FastAPI instead of Django doesn't give me big improvement for development experience</li><li>i feel like implementing web app is verbose somehow</li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="sqlalchemy"><a href="https://www.sqlalchemy.org/" target="_blank" rel="noopener noreferrer">SQLAlchemy</a><a href="#sqlalchemy" class="hash-link" aria-label="Direct link to sqlalchemy" title="Direct link to sqlalchemy">​</a></h4><ul><li>database toolkit for python</li><li>query API is similar to raw sql</li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="pydantic"><a href="https://docs.pydantic.dev/" target="_blank" rel="noopener noreferrer">pydantic</a><a href="#pydantic" class="hash-link" aria-label="Direct link to pydantic" title="Direct link to pydantic">​</a></h4><ul><li>data validation and serializer using type annotations</li><li>using type annotations is kinda hucky<ul><li>actually python 3.10 and 3.11 didn't standardize <code>__future__.annotation</code> mainly due to FastAPI and pydantic</li><li>personally i think it's difficult to use type strictly in python</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="pandas"><a href="https://pandas.pydata.org/" target="_blank" rel="noopener noreferrer">pandas</a><a href="#pandas" class="hash-link" aria-label="Direct link to pandas" title="Direct link to pandas">​</a></h4><ul><li>library to manipulate table data</li><li>used to process excel files possibly having numerous data</li><li>i could manage to implement although it was long time since i had used last</li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="others">Others<a href="#others" class="hash-link" aria-label="Direct link to Others" title="Direct link to Others">​</a></h3><h4 class="anchor anchorWithStickyNavbar_O99L" id="playwright"><a href="https://playwright.dev/" target="_blank" rel="noopener noreferrer">Playwright</a><a href="#playwright" class="hash-link" aria-label="Direct link to playwright" title="Direct link to playwright">​</a></h4><ul><li>E2E test library</li><li>writing and maintaining E2E tests are too hard<ul><li>after all i neglected them and they obsoleted</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="docker"><a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a><a href="#docker" class="hash-link" aria-label="Direct link to docker" title="Direct link to docker">​</a></h4><ul><li>understood detail more</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="languages">Languages<a href="#languages" class="hash-link" aria-label="Direct link to Languages" title="Direct link to Languages">​</a></h2><h3 class="anchor anchorWithStickyNavbar_O99L" id="rust">Rust<a href="#rust" class="hash-link" aria-label="Direct link to Rust" title="Direct link to Rust">​</a></h3><ul><li>learned what language it is at last<ul><li>read <a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener noreferrer">The Rust Programming Language</a> twice</li></ul></li><li>difficult to learn and use<ul><li>ownership rule and borrow checker<ul><li>invisible so hard to track them</li><li>preventing declarative implementaion</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="books">Books<a href="#books" class="hash-link" aria-label="Direct link to Books" title="Direct link to Books">​</a></h2><h3 class="anchor anchorWithStickyNavbar_O99L" id="done-reading">Done Reading<a href="#done-reading" class="hash-link" aria-label="Direct link to Done Reading" title="Direct link to Done Reading">​</a></h3><ul><li><em>The Pragmatic Programmer (20th Anniversary Ed.)</em></li><li><em>The Unix Philosophy (1st Ed.)</em><ul><li><blockquote><p>Tenet1. Small is beautiful<br>
<!-- -->Tenet2. Make each program do one thing well<br>
<!-- -->Tenet9. Make every program a filter</p></blockquote></li><li><blockquote><p>"Software is never finished. It is only released."</p></blockquote></li></ul></li><li><em>Hacking: The Art of Exploitation (2nd Ed.)</em></li><li><em>Fluent Python (2nd Ed.)</em></li><li><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener noreferrer">The Rust Programming Language</a></li><li><a href="https://book.debuggingteams.com/" target="_blank" rel="noopener noreferrer">Debugging Teams</a><ul><li>HRT<ul><li>Humility</li><li>Respect</li><li>Trust</li></ul></li><li>Fail fast and iterate</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="still-reading">Still Reading<a href="#still-reading" class="hash-link" aria-label="Direct link to Still Reading" title="Direct link to Still Reading">​</a></h3><ul><li><em>Essentials of Programming Languages (3rd Ed.)</em></li><li><em>A Book of Abstract Algebra</em></li><li><em>Joel on Software</em></li><li><em>Computer Systems: A Programmer's Perspective (3rd Ed.)</em></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202211]]></title>
            <link>https://e5pe0n.github.io/blog/2022/11/06/202211_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/11/06/202211_Log</guid>
            <pubDate>Sun, 06 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li><p>impl batch process</p><ul><li>django user defined command</li><li>boto3</li><li>pandas</li></ul></li><li><p><em>Essentials of Programming Languages</em></p><ul><li>Chapter 5. Continuation-Passing Interpreter<ul><li>5.2 Trampolined Interpreter done!</li></ul></li></ul></li><li><p><em>A Book of Abstract Algebra</em></p><ul><li>Chapter 6. Functions done!</li></ul></li><li><p><a href="https://book.debuggingteams.com/" target="_blank" rel="noopener noreferrer"><em>Debugging Teams</em></a></p><ul><li>done reading!</li><li>important core concept: HRT<ul><li>Humility</li><li>Respect</li><li>Trust</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progreess">In Progreess<a href="#in-progreess" class="hash-link" aria-label="Direct link to In Progreess" title="Direct link to In Progreess">​</a></h2><ul><li><p><em>Essentials of Programming Languages</em></p><ul><li>Chapter 5. Continuation-Passing Interpreter<ul><li>5.3 An Imperative Interpreter</li></ul></li></ul></li><li><p><em>A Book of Abstract Algebra</em></p><ul><li>Chapter 7. Groups of Permutations</li></ul></li><li><p><em>Jeol on Software</em></p></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li><p><a href="https://github.com/e5pe0n/rust-sandbox/tree/main/todo_list" target="_blank" rel="noopener noreferrer">todo list</a></p><ul><li>practice rust</li><li>i wanna use macro to implement command line arguments parser just by defining command options</li></ul></li><li><p><em>Programming in Haskell</em></p></li><li><p><em>SQL Antipatterns: Avoiding the Pitfalls of Database Programming</em></p></li><li><p><em>Database Internals</em></p></li><li><p><em>Computer Organization and Design MIPS Edition: The Hardware/Software Interface (6th ed.)</em></p></li><li><p><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener noreferrer"><em>The Architecture of Open Source Applications</em></a></p></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="something">Something<a href="#something" class="hash-link" aria-label="Direct link to Something" title="Direct link to Something">​</a></h2><ul><li>tooooooo busy this month<ul><li>woke up at 6:00 then worked from 7:00 to 23:00</li><li>tight schedule made me increase the speed and concentration to implement</li><li>but couldn't progress my study and programming other than work for job</li><li>i'm already tired and hard to keep motivation<ul><li>only hope is my PM; he is a really good PM, manages to reschedule as much as possible and encourages me</li></ul></li></ul></li><li>i'm wondering it's good for me to spend such time in my life on working at current company</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>Capsule / Sana</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202210]]></title>
            <link>https://e5pe0n.github.io/blog/2022/10/30/202210_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/10/30/202210_Log</guid>
            <pubDate>Sun, 30 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener noreferrer"><em>The Rust Programming Language</em></a><ul><li>read all again</li></ul></li><li>React<ul><li><a href="https://tanstack.com/table/v8" target="_blank" rel="noopener noreferrer">tanstack-table (react-table)</a><ul><li>got used to the api and how the table using it can be decomposed</li></ul></li><li>implemented complicated forms and modals</li></ul></li><li>Django<ul><li>got used to query expressions<ul><li>i miss SQLAlchemy...</li></ul></li></ul></li><li>too busy but too bored</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progreess">In Progreess<a href="#in-progreess" class="hash-link" aria-label="Direct link to In Progreess" title="Direct link to In Progreess">​</a></h2><ul><li><p><a href="https://github.com/e5pe0n/rust-sandbox/tree/main/todo_list" target="_blank" rel="noopener noreferrer">todo list</a></p><ul><li>practice rust</li><li>i wanna use macro to implement command line arguments parser just by defining command options</li></ul></li><li><p><em>Essentials of Programming Languages</em></p><ul><li>Chapter 5. Continuation-Passing Interpreter</li></ul></li><li><p><em>A Book of Abstract Algebra</em></p><ul><li>Chapter 6. Functions</li></ul></li><li><p><a href="https://book.debuggingteams.com/" target="_blank" rel="noopener noreferrer"><em>Debugging Teams</em></a></p><ul><li>Introduction - Every Boat Needs a Captain</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li><em>Programming in Haskell</em></li><li><em>SQL Antipatterns: Avoiding the Pitfalls of Database Programming</em></li><li><em>Database Internals</em></li><li><em>Computer Organization and Design MIPS Edition: The Hardware/Software Interface (6th ed.)</em></li><li><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener noreferrer"><em>The Architecture of Open Source Applications</em></a></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>Simple and Clean (Ray Of Hope Mix) / Utada Hikaru</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202209]]></title>
            <link>https://e5pe0n.github.io/blog/2022/09/24/202209_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/09/24/202209_Log</guid>
            <pubDate>Sat, 24 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li><p><em>Fluent Python (2nd ed.)</em></p><ul><li><p>read all! (about 1000 pages)</p></li><li><p>this was really interesting book</p><ul><li>writing about python from the various perspective<ul><li>comparing with other languages</li><li>applying various design patterns</li><li>why python choose this syntax and language features, or why python doesn't do</li></ul></li><li>i could learn a lot of general language features, design patterns, architectures and the way to solve problems along with python's language philosophy</li><li>reviewing the language from only one point of view is poor thinking<ul><li>there are a lot of fields where the language is used</li></ul></li><li>along with <em>Essentials of Programming Languages</em>, i knew that how python make it simple and easy to use by hiding low layer implementation such as pointers, treatment of strings, and resource management</li><li>how easy to use string in python<ul><li>default utf-8 encoding, slice</li></ul></li><li>one of the most my favarite point is the syntax to create <em>list</em> and <em>dict</em><ul><li><code>[1, 2, 3]</code> and <code>{"x": 1, "y": 2}</code> are almost diagrams</li><li>to realize what data is, we just look at it, never read it</li><li>perceivability &gt; readability</li></ul></li><li>after all, completely covering python code with type hints is reckless<ul><li>some packages, even pervasive ones, don't offer types enough</li><li>errors of mypy and pylance are too annoying</li><li>personally i want to stop using mypy<ul><li>annotate types every parameters and returns, even it's apparent, are bother; optional typing is best choice</li><li>even variable name, docstring and comments are sufficient to give information of what data is</li><li>forcing static typing may kill some advantage of python as dynamic language</li></ul></li></ul></li></ul></li><li><p>learned</p><ul><li>decorator using <em>class</em> with <code>__call__()</code></li><li>explicit use <em>TypeAlias</em></li><li>function singleddispatch</li><li>typeings python supports<ul><li>duck typing<ul><li>avoiding <code>isinstance()</code></li><li>using <em>try-catch</em> (<em>EAFP</em>; easier to ask for forgiveness than permission)<ul><li>&lt;-&gt; <em>LBYL</em>; look before you leap</li><li>hmm i don't like this style lol</li><li>but it seems that this style has advantage at concurrent programming</li></ul></li></ul></li><li>goose typing<ul><li>using <code>isinstance()</code></li></ul></li><li>static typing<ul><li>mypy</li></ul></li><li>static duck typing<ul><li><em>protocol</em>s</li></ul></li></ul></li><li>favor <em>object composition</em> over <em>class inheritance</em><ul><li>this was also said by <em>JavaScript: The Definitive Guide</em></li></ul></li><li>variance rules of thumb<ul><li>if a formal type parameter defines a type for data that goes into the object after its initial construction, it can be <em>contravariant</em> (strict)</li><li>if a formal type parameter defines a type for data that comes out of the object, it can be <em>covariant</em> (lenient)</li><li>e.g. given <code>Callable[[ParamType, ...], ReturnType]</code>, each <em>ParamType</em> is contravariant and <em>ReturnType</em> is covariant</li></ul></li><li><em>with</em> statement<ul><li><blockquote><p>It’s like factoring out the filling in a sandwich: using tuna with different breads. But what if you want to factor out the bread, to make sandwiches with wheat bread, using a different filling each time? That’s what the with statement offers.</p></blockquote></li></ul></li><li>python doesn't implement tail recursion optimization (PTC; proper tail calls)<ul><li><blockquote><p>Personally, I think it is a fine feature for some languages, but I don’t think it fits Python: the elimination of stack traces for some calls but not others would certainly confuse many users, who have not been raised with tail call religion but might have learned about call semantics by tracing through a few calls in a debugger.  - Guido van Rossum</p></blockquote></li></ul></li><li>coroutines<ul><li>run <em>event loop</em> then manage coroutines in it<ul><li>passing control from one coroutine to another</li></ul></li><li>thus coroutine is the way to run the program concurrently in a sigle thread</li><li>only one coroutine runs at a time</li><li>pros<ul><li>no data corruption (vs. threads)</li><li>no cost of memory and context switch (vs. processes)</li></ul></li><li>cons<ul><li>cannot be used for CPU-intensive jobs<ul><li>because only one coroutine runs at a time and it blocks the entire process</li><li>use processes instead</li></ul></li><li>cannot be used for file I/O<ul><li>we can use <code>asyncio.to_thread()</code> to avoid blocking the entire process</li></ul></li></ul></li></ul></li><li>descriptor<ul><li>the way to abstract away property definitions<ul><li>a class that implements a dynamic protocol consisting of the <code>__get__()</code>, <code>__set__()</code>, and <code>__delete__()</code> methods</li></ul></li><li><em>method</em>s in python are also descriptor!</li><li><blockquote><p>Reading an attribute through an instance normally returns the attribute defined in the instance, but if there is no such attribute in the instance, a class attribute will be retrieved. On the other hand, assigning to an attribute in an instance normally creates the attribute in the instance, without affecting the class at all.</p></blockquote></li></ul></li><li><em>type</em> class is a <em>metaclass</em>: a class that builds classes<ul><li><em>type</em> is a subclass of <em>object</em></li><li>but at the same time <em>object</em> is an instance of <em>type</em> (what?!)</li></ul></li></ul></li><li><p>some interesting references</p><ul><li><a href="https://docs.google.com/document/d/1aXs1tpwzPjW9MdsG5dI7clNFyYayFBkcXwRDo-qvbIk/preview" target="_blank" rel="noopener noreferrer">Strong Typing vs. Strong Testing</a></li><li><a href="https://www.yodaiken.com/2017/09/15/bad-ideas-in-type-theory/" target="_blank" rel="noopener noreferrer">Bad ideas in type theory</a></li><li><a href="https://www.yodaiken.com/2017/11/30/types-considered-harmful-ii/" target="_blank" rel="noopener noreferrer">Types considered harmful II</a></li><li><a href="https://web.archive.org/web/20071010002142/http://weblogs.java.net/blog/arnold/archive/2005/06/generics_consid_1.html" target="_blank" rel="noopener noreferrer">Generics Considered Harmful</a></li><li><a href="https://gist.github.com/jboner/2841832" target="_blank" rel="noopener noreferrer">Latency Numbers Ever Programmer Should Know</a></li><li><a href="https://dreamsongs.com/RiseOfWorseIsBetter.html" target="_blank" rel="noopener noreferrer">Worse is Better</a><ul><li>this was said by <em>The Unix Philosophy</em></li><li>also, in Patterson &amp; Hennessy's book: <em>コンピュータの構成と設計</em>,<ul><li><blockquote><p>優れた設計には適度な妥協が必要である</p></blockquote></li><li>this is a principle about hardware design, but i think this is true to software too</li></ul></li></ul></li></ul></li><li><p>some wise words</p><ul><li><blockquote><p>Be conservative in what you send, be liberal in what you accept.  <!-- -->-<!-- --> Postel's law, a.k.a the Robustness Principle</p></blockquote></li><li><blockquote><p>If you want the sum of a list of items, you should write it in a way that looks like “the sum of a list of items,” not in a way that looks like “loop over these items, maintain another variable t, perform a sequence of additions.” Why do we have high-level languages if not to express our intentions at a higher level and let the language worry about what low-level operations are needed to implement it?  <!-- -->-<!-- --> David Eppstein’s</p></blockquote></li><li><blockquote><p>When I see patterns in my programs, I consider it a sign of trouble. The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I’m using abstractions that aren’t powerful enough—often that I’m generating by hand the expansions of some macro that I need to write. ​  —​Paul Graham, Lisp hacker and venture capitalist</p></blockquote></li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progreess">In Progreess<a href="#in-progreess" class="hash-link" aria-label="Direct link to In Progreess" title="Direct link to In Progreess">​</a></h2><ul><li><p><em>Essentials of Programming Languages</em></p><ul><li>Chapter 5. Continuation-Passing Interpreter<ul><li>learned how to optimize tail recursion</li><li>if recursive function is tail recursion, it no longer need data stored within the current scope of the function for the next call</li><li>the way passing control flow like data was really fresh idea to me, i had never think like that</li><li>but i still have a question<ul><li>continuation-passing style actually doesn't leave the function on stack, which is waiting for the value returned from the function called in it</li><li>but instead, continuations, which is a multi-nested closure, appear as arguments at a function call</li><li>does this really work as optimization?</li></ul></li></ul></li></ul></li><li><p><em>A Book of Abstract Algebra</em></p><ul><li>Chapter 5. Subgroups done!</li><li>there are many terms that appear in <em>A First Course In Graph Theory</em><ul><li>i've stopped reading it<ul><li>a lot of terminologies to which i'm not familiar</li><li>very abstract</li><li>boring</li></ul></li><li>maybe i should've learn abstract algebra first<ul><li>i wanna revenge after learning abstract algebra!</li></ul></li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li><p>implement something in rust</p><ul><li>there is demand to rust in the company<ul><li>honestly i think typescript is the best choice for almost all of our product<ul><li>can write both frontend and backend<ul><li>maybe server-side react will come</li></ul></li><li>easy to learn and use</li><li>good googlabiliity</li><li>cost to learn rust and the strictness don't correspond with our products</li><li>questionable to implement web apps in such a low-level language</li></ul></li><li>but i wanna use rust if used go lang</li></ul></li></ul></li><li><p><em>Programming in Haskell</em></p><ul><li>putting aside good or bad, i like static typing and functional languages after all<ul><li>really fun to write program in them</li></ul></li><li>i wanna read again</li></ul></li><li><p><em>SQL Antipatterns: Avoiding the Pitfalls of Database Programming</em></p></li><li><p><em>Database Internals</em></p></li><li><p><em>Computer Organization and Design MIPS Edition: The Hardware/Software Interface (6th ed.)</em></p></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>Beautiful World / Utada Hikaru</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202208]]></title>
            <link>https://e5pe0n.github.io/blog/2022/08/28/202208_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/08/28/202208_Log</guid>
            <pubDate>Sun, 28 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li>React</li><li>Python<ul><li>FastAPI<ul><li>smaller and simpler then flexible than nonolithic Django</li><li>we have to composite other tools such as for migrations and for ORM</li><li>instead, we can customize it for our favor</li></ul></li><li>Pydantic<ul><li>better than Django REST framework</li><li>but doesn't reach at all how we can handle objects far easily in JS/TS</li><li>so far, replacement Django with FastAPI doesn't solve my demand to backend TS</li></ul></li><li>SQLAlchemy<ul><li>API is similar to raw SQL so better to learn and use than Django models and queries</li><li>i don't want ORM to wrap a logic part of SQL such as join and where or so by like <code>filter()</code> or <code>query()</code> because they don't abstract them or make them easy to use at all, they just alias them.  <ul><li>i first assemble logic in raw SQL then i have to think of like how do i write this in ORM query API...what a waste of time!</li><li>most cumbersome when writing raw SQL is to convert result records to objects</li><li>that's all i want ORM to do</li></ul></li><li>query API of SQLAlchemy v2.0 match my demand</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progreess">In Progreess<a href="#in-progreess" class="hash-link" aria-label="Direct link to In Progreess" title="Direct link to In Progreess">​</a></h2><ul><li><p>Essentials of Programming Languages</p><ul><li>4.State done!</li></ul></li><li><p>Fluent Python (2nd Edition)</p><ul><li>Chapter 11. A Pythoinic Object done</li><li>decorator using a class with <code>__call__()</code> is easier to understand the working than a multi-nested function</li><li>functools.singledispatch<ul><li>enable to divide the generic function into small functions for each type</li></ul></li><li>Protocol type<ul><li>enable to add type hint to duck typing</li></ul></li></ul></li><li><p>A Book of Abstract Algebra</p><ul><li>many erratum</li><li>but the contents give many examples to help understand</li><li>the level of excercises is easy<ul><li>working by my hand is also help to remember and understand the properties of groups</li></ul></li><li>done<ul><li>Chapter 4. Elementary Properties of Groups</li></ul></li><li>in progress<ul><li>Chapter 5. Subgroups</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li>Database Internals</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>State of Slow Decay / In Flames</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202207]]></title>
            <link>https://e5pe0n.github.io/blog/2022/07/31/202207_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/07/31/202207_Log</guid>
            <pubDate>Sun, 31 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li><a href="https://doc.rust-lang.org/book/title-page.html" target="_blank" rel="noopener noreferrer">Rust The Programming Language</a></li><li>JS/TS<ul><li>yup</li><li>zod</li></ul></li><li>React<ul><li>cloneElement</li><li>Context</li></ul></li><li>Python<ul><li>FastAPI</li></ul></li><li>backend<ul><li>solved N + 1 problem</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progreess">In Progreess<a href="#in-progreess" class="hash-link" aria-label="Direct link to In Progreess" title="Direct link to In Progreess">​</a></h2><ul><li>Essentials of Programming Languages<ul><li>4.State</li></ul></li><li>Fluent Python (2nd Edition)<ul><li>more than 1000 pages lol</li></ul></li><li>A Book of Abstract Algebra<ul><li>2.Group</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stack">Stack<a href="#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2><ul><li>Database Internals</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>Bibouroku / Sana</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202205]]></title>
            <link>https://e5pe0n.github.io/blog/2022/05/28/202205_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/05/28/202205_Log</guid>
            <pubDate>Sat, 28 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievements]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievements">Achievements<a href="#achievements" class="hash-link" aria-label="Direct link to Achievements" title="Direct link to Achievements">​</a></h2><ul><li>Essentials of Programming Languages<ul><li>Re-implemented chapter 3 using SLLGEN</li></ul></li><li>Hacking: The Art of Exploitation<ul><li>learned about<ul><li>memory segments</li><li>the foundation of network again<ul><li>how is the content of a packet in binary</li></ul></li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="stacked">Stacked<a href="#stacked" class="hash-link" aria-label="Direct link to Stacked" title="Direct link to Stacked">​</a></h2><ul><li>A Book of Abstract Algebra</li><li><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener noreferrer">The Architecture of Open Source Applications</a></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="monthly-review">Monthly Review<a href="#monthly-review" class="hash-link" aria-label="Direct link to Monthly Review" title="Direct link to Monthly Review">​</a></h2><ul><li>i could take a break<ul><li>honestly the first half of May i've been burned out and had no motivation</li><li>that's good once in a while</li></ul></li><li>Hacking: The Art of Exploitation is interesting<ul><li>i learned the foundation which is necessary for programming again</li><li>i'm not good at network but i could get interesting in it</li><li>read raw socket implementations<ul><li>all data flowing on network is simply binary: a sequence of bits<ul><li>which is thought that it should be arranged, following a standard like RFC</li><li>but we can send binary data by any bit arrangement to hack</li></ul></li></ul></li><li>some knowledge about network was useful for my job<ul><li>building local DNS server using Dnsmasq to access local web app on Mac by hostname from iPad</li></ul></li></ul></li></ul><ul><li>wish list<ul><li>learning Rust<ul><li>i'm interesting in the lower part of programming</li><li>i wanna use static typed language</li></ul></li><li>books<ul><li>Fluent Python 2nd Edtion<ul><li>i read the 1st Edition<ul><li>it was very long but the 2nd is twice longer!</li></ul></li><li>honestly, recently i don't like python</li><li>but many project use python so the demand cannot be ignored</li></ul></li><li>Mastering Regular Expressions: Understand Your Data and Be More Productive<ul><li>after that, program is a sequence of strings before compiled</li><li>handling strings can be a hack</li><li>and regex is powerful enough to make my development more efficient</li></ul></li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li><p>last few years i've almost linstened to instrumental music </p></li><li><p>wish every metal band would stream the intrument version for their all songs...</p></li><li><p>artists</p><ul><li>Hedras</li><li>Xeuphoria</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202204]]></title>
            <link>https://e5pe0n.github.io/blog/2022/04/16/202204_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/04/16/202204_Log</guid>
            <pubDate>Sat, 16 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li>One web service releaced<ul><li>python<ul><li>django</li></ul></li><li>typescript/javascript<ul><li>react<ul><li>next.js</li></ul></li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progress">In Progress<a href="#in-progress" class="hash-link" aria-label="Direct link to In Progress" title="Direct link to In Progress">​</a></h2><ul><li>Essentials of Programming Languages</li><li>A Book of Abstract Algebra</li><li><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener noreferrer">The Architecture of Open Source Applications</a></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="review-since-feburary">Review since Feburary<a href="#review-since-feburary" class="hash-link" aria-label="Direct link to Review since Feburary" title="Direct link to Review since Feburary">​</a></h2><ul><li>one of the busiest days in my life<ul><li>Feburary and March</li></ul></li><li>develop and release a web app by a team for the first time</li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="good">Good<a href="#good" class="hash-link" aria-label="Direct link to Good" title="Direct link to Good">​</a></h3><ul><li>knowledge about<ul><li>django<ul><li>especially ORM, QuerySet and Q object</li></ul></li></ul></li><li>make common react components from scratch<ul><li>such as<ul><li>list select</li><li>pagination</li><li>multi-sortable table</li><li>login required layout</li></ul></li><li>i know there are libraries for these components and it's better to use them for a production development</li><li>but i wanted to write them by my hand once</li></ul></li><li>write abstract functions in functional fashion in python<ul><li>deep map</li><li>deep filter</li><li>deep zip</li><li>flatten</li><li>fit</li></ul></li><li>make github actions<ul><li>auto-deploy</li></ul></li><li>write sql for data migration<ul><li>make sqls written by a teamate more faster<ul><li>first make a big table by joining source tables, then select from it</li></ul></li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="bad">Bad<a href="#bad" class="hash-link" aria-label="Direct link to Bad" title="Direct link to Bad">​</a></h3><h4 class="anchor anchorWithStickyNavbar_O99L" id="wrote-a-lot-of-complex-tests">wrote a lot of, complex tests<a href="#wrote-a-lot-of-complex-tests" class="hash-link" aria-label="Direct link to wrote a lot of, complex tests" title="Direct link to wrote a lot of, complex tests">​</a></h4><h5 class="anchor anchorWithStickyNavbar_O99L" id="i-wanted-to">I wanted to<a href="#i-wanted-to" class="hash-link" aria-label="Direct link to I wanted to" title="Direct link to I wanted to">​</a></h5><ul><li>check for any pattern of parameters each test</li><li>make each test more general</li></ul><h5 class="anchor anchorWithStickyNavbar_O99L" id="why-bad">Why Bad<a href="#why-bad" class="hash-link" aria-label="Direct link to Why Bad" title="Direct link to Why Bad">​</a></h5><ul><li>hard to maintain tests<ul><li>tests are broken even when i changed source code a bit</li><li>readers else, other teamates can't understand what the test is for at a glance<ul><li>they should followed the logic in the test</li><li>they need to debug to make the failed test pass</li><li>it's much burden to write tests like so by themselves<ul><li>tests are written not only by me but also teamates</li></ul></li></ul></li></ul></li></ul><h5 class="anchor anchorWithStickyNavbar_O99L" id="so-i-should">So I should<a href="#so-i-should" class="hash-link" aria-label="Direct link to So I should" title="Direct link to So I should">​</a></h5><ul><li>prefer simplicity to generality when it's difficult to make a test general while keeping the simplicity<ul><li><strong>writing tests that cannot be maintained is the same as not writing tests at all</strong></li><li>it's a good and sipmle method for getting a test more general to make factory methods (fixtures) to make objects used in tests repeatedly</li><li>don't use <em>if</em> statement in a test<ul><li>divide the test into two or more</li></ul></li><li>keep the number of objects used in a test the least</li></ul></li><li>don't repeat the same test cases tested in other tests<ul><li>if the same test cases should be checked in several tests, it might be good to modularize source code to separate the test cases</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="btw">BTW<a href="#btw" class="hash-link" aria-label="Direct link to BTW" title="Direct link to BTW">​</a></h2><h3 class="anchor anchorWithStickyNavbar_O99L" id="windows--mac-for-me-now">Windows &gt; Mac for me now<a href="#windows--mac-for-me-now" class="hash-link" aria-label="Direct link to Windows > Mac for me now" title="Direct link to Windows > Mac for me now">​</a></h3><ul><li>peformance of docker on mac is too poor<ul><li>slow</li><li>typescript extension and prettier in vscode remote container often die</li></ul></li><li>linux compatibility<ul><li>i can use ubuntu in windowns thanks to WSL</li></ul></li><li>mouse &gt; trackpad<ul><li>my shoulder, arm and hand often hurts using trackpad</li></ul></li><li>keyboard<ul><li>mac compatible keyboards less<ul><li>mac compatible mechanical keyboards much less</li><li>HHK is out because of the keyboard layout</li><li>i had no choice but to use <a href="https://www.realforce.co.jp/products/R2TLSA-US3M-BK/" target="_blank" rel="noopener noreferrer">realforce</a> but ... i don't like realforce keyboard so much<ul><li>(why USB is type-A but for mac?)</li></ul></li></ul></li><li><a href="https://www.hyperxgaming.com/en/keyboards/alloy-fps-pro-mechanical-gaming-keyboard" target="_blank" rel="noopener noreferrer">HyperX Alloy FPS Pro</a> is the best keyboard for me now<ul><li>(although i don't play FPS)</li></ul></li></ul></li><li>cost<ul><li>mac is too expensive</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="team-development">Team Development<a href="#team-development" class="hash-link" aria-label="Direct link to Team Development" title="Direct link to Team Development">​</a></h3><ul><li><strong>do write documents and tests</strong><ul><li>don't think that it's ok if i know it or i can do it</li><li>if there is no document and test<ul><li>new teamate will take long time to understand the project, the system and the source code<ul><li>we cannot get help when we want help</li></ul></li><li>we cannot share information about our project<ul><li>we don't want to touch the thing we don't know well<ul><li>motivateion and teamwork down</li></ul></li><li>we have to explain about our project reatedly<ul><li>it's lazy to explain so some part of work get more dependent on one developer</li></ul></li></ul></li><li>developer also need to maintain the developed part by him/herself<ul><li>because only he/she knows about how it works</li></ul></li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>LIFE / YUI<ul><li>listened over ten years ago when i was a elementary school student, and listen now too</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202201]]></title>
            <link>https://e5pe0n.github.io/blog/2022/01/03/202201_Log</link>
            <guid>https://e5pe0n.github.io/blog/2022/01/03/202201_Log</guid>
            <pubDate>Mon, 03 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Happy New Year!]]></description>
            <content:encoded><![CDATA[<p>Happy New Year!</p><h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li>Pragmatic Programmer (20th Anniversary Edtion)</li><li>The Unix Philosophy<ul><li>i got different perspective from before to develop softwares<ul><li>more ambitious and larger scale (both timely and systemly)</li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progress">In Progress<a href="#in-progress" class="hash-link" aria-label="Direct link to In Progress" title="Direct link to In Progress">​</a></h2><ul><li>Essentials of Programming Languages</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="what-next">What Next<a href="#what-next" class="hash-link" aria-label="Direct link to What Next" title="Direct link to What Next">​</a></h2><ul><li>make a smartphone app<ul><li>study app<ul><li>which language?<ul><li>Dart looks good but it seems that i'll suffer from problems such as build errors and dependency errors due to cross platform...</li><li>probably i'll choose Kotlin and Swift so far.</li></ul></li></ul></li></ul></li><li>learn Rust<ul><li>although the priority is low in my mind</li></ul></li><li>read<ul><li>Computer Organization and Design MIPS Edition: The Hardware/Software Interface</li><li>kinda Biology introduction<ul><li>i think that biology might give me somewhat ideas about system and software.</li></ul></li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202112]]></title>
            <link>https://e5pe0n.github.io/blog/2021/12/02/202112_Log</link>
            <guid>https://e5pe0n.github.io/blog/2021/12/02/202112_Log</guid>
            <pubDate>Thu, 02 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li>Programming TypeScript / Boris Cherny / O'Reilly</li><li>Responsive Web Design with HTML5 and CSS / Ban Frain / Packt</li><li>Effective TypeScript / Dan Vanderkam / O'Reilly</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="in-progress">In Progress<a href="#in-progress" class="hash-link" aria-label="Direct link to In Progress" title="Direct link to In Progress">​</a></h2><ul><li>Essentials of Programming Languages / Daniel P. Friedman, Mitchell Wand / The MIT Press</li><li>Pragmatic Programmer / David Thomas, Andrew Hunt / Pearson Addson-Wesley</li><li>The Unix Philosophy / Mike Gancarz</li><li>Database Internals / Alex Petrov / O'Reilly</li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="review-of-my-2021">Review of My 2021<a href="#review-of-my-2021" class="hash-link" aria-label="Direct link to Review of My 2021" title="Direct link to Review of My 2021">​</a></h2><h3 class="anchor anchorWithStickyNavbar_O99L" id="learned-about">Learned about<a href="#learned-about" class="hash-link" aria-label="Direct link to Learned about" title="Direct link to Learned about">​</a></h3><ul><li>CS<ul><li>Systems<ul><li>Clean Architecture</li></ul></li><li>Algorithms<ul><li>AtCoder<ul><li>Green</li></ul></li><li>Cracking the Coding Interview (6th Edition)<ul><li>C++</li><li>Python</li></ul></li></ul></li><li>Math<ul><li>Number Theory</li><li>Logic</li><li>Computation Theory</li><li>Linear Algebra</li><li>Statistics</li><li>Graph Theory</li></ul></li><li>Machine Learning / Deep Learning<ul><li>TensorFlow</li><li>Keras</li></ul></li><li>Database<ul><li>Database Internals</li></ul></li></ul></li><li>Languages<ul><li>C++</li><li>Python<ul><li>Pytest</li></ul></li><li>JavaScript/TypeScript<ul><li>React<ul><li>Next.js</li><li>React Testing Library</li></ul></li><li>Node.js<ul><li>Jest</li></ul></li></ul></li><li>Functional Programming<ul><li>Haskell</li><li>Scala</li><li>Scheme</li><li>JavaScript<ul><li>React</li></ul></li></ul></li></ul></li><li>AWS<ul><li>SAM</li><li>Lambda<ul><li>Lambda Layers</li></ul></li><li>API Gateway</li><li>S3</li><li>CloudFront</li><li>CloudWatch<ul><li>log</li><li>watch</li></ul></li><li>DynamoDB</li><li>Route53</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="programming-languages">Programming Languages<a href="#programming-languages" class="hash-link" aria-label="Direct link to Programming Languages" title="Direct link to Programming Languages">​</a></h3><h4 class="anchor anchorWithStickyNavbar_O99L" id="jsts">JS/TS<a href="#jsts" class="hash-link" aria-label="Direct link to JS/TS" title="Direct link to JS/TS">​</a></h4><p>it was soooooooooooo big for me to have learn about JavaScript/TypeScript deeply.</p><ul><li>JS/TS is the best language for me so far.<ul><li>i can write code easily.<ul><li>i can write both frontend and backend in just JS/TS only.<ul><li>i knew that it's hard so much to keep learning and using some languages in practice.</li></ul></li><li>rich syntaxies and language features<ul><li>array function<ul><li>this is a very big feature to those who like functional style.</li></ul></li><li>spread syntax, object destruction, promise, await/async etc</li></ul></li><li>transpile<ul><li>always work in the newest JS/TS version<ul><li>JS has many pitfalls that are awkward and surprise novices.</li><li>new syntaxies or language structures have been released to replace them although old ones will remain in the future for backward-compatibility.</li><li>but we can always write program safely and comfortably in the newest JS/TS version, then transpile it to a target older version so we don't worry about the old language features.</li></ul></li><li>prototyping or tracer bullet<ul><li>i can ignore compile errors from TS and emit the build product anyway.</li><li>this flexibility is useful for prototyping or tracer bullet<ul><li>in early stage, implement roughly to think of specification details</li><li>then gradually get it strict for realistic system</li></ul></li></ul></li></ul></li><li>static analysis<ul><li>i can catch bugs not at runtime but at compile time</li><li>type safe<ul><li>TS gives me useful infomation about a variable, funciton, or so when i'm writing code</li><li>TS notifies me even typos by using <em>String Union</em></li></ul></li></ul></li><li>structural type<ul><li>it's more flexible and useful for web development than nominal type</li></ul></li></ul></li><li>it's popular<ul><li>someone said that googlability is preferable to language goodness. it's one of truths</li><li>supported by many services and platforms<ul><li>AWS</li></ul></li><li>a lot of frameworks and libraries provided by communities</li></ul></li></ul></li><li>demand to master JS<ul><li>JS is popular but i feel that those mastering JS is less than i expect</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="python">Python<a href="#python" class="hash-link" aria-label="Direct link to Python" title="Direct link to Python">​</a></h4><ul><li>i still think that Python is a good language<ul><li>simple syntax</li><li>useful language features and built-in functions</li><li>we can run an implementation anyway because of dynamically interpreted.</li><li>we can add type infomation using <em>typehint</em>.</li><li>popular<ul><li>many books about Python</li><li>many services and platforms support Python</li><li>many libraries and platforms published by communities</li></ul></li></ul></li><li>but i feel that it might not satisfy strictness to develop a production.  <ul><li>type system is insufficient<ul><li>VSCode often doesn't show up type information even when using <em>typehint</em></li><li>these is no compile time error; just all occur runtime</li></ul></li><li>less maintainancibility<ul><li>there is no constant variable in Python</li></ul></li></ul></li><li>for my preference<ul><li>the syntax is not for functional sytle<ul><li>not type safe</li><li><em>lambda</em> function can be written in only one line</li><li>it's difficult to chain functions</li></ul></li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="haskellscheme">Haskell/Scheme<a href="#haskellscheme" class="hash-link" aria-label="Direct link to Haskell/Scheme" title="Direct link to Haskell/Scheme">​</a></h4><ul><li>writing programs in Haskell and Scheme was very good excercise to implement logics in functional programming style.  <ul><li>i got familiar with the recursion.</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="development">Development<a href="#development" class="hash-link" aria-label="Direct link to Development" title="Direct link to Development">​</a></h3><h4 class="anchor anchorWithStickyNavbar_O99L" id="test">Test<a href="#test" class="hash-link" aria-label="Direct link to Test" title="Direct link to Test">​</a></h4><ul><li>i wrote tests right for the first time.</li><li>i spent a lot of time to learn how to write tests, and implement actually and run tests properly...<ul><li>Pytest</li><li>Jest</li><li>React Testing Library<ul><li>not easy to use...</li><li>GUI test is more difficult than tests for backend.</li><li>i don't know React design pattern to make tests easy.<ul><li>i can't divide a form component into API fetching and renderer.</li></ul></li></ul></li></ul></li><li>i knew that writing test take more time than implementing features.<ul><li>it makes me to consider testability while implementing features.<ul><li>i got to be to prefer functional programming style.  </li></ul></li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="algorithms">Algorithms<a href="#algorithms" class="hash-link" aria-label="Direct link to Algorithms" title="Direct link to Algorithms">​</a></h3><ul><li>AtCoder and <em>Cracking the Coding Interview</em> was very good practice to implement algorithms.<ul><li>when i'm in trouble to implement logics in ordinal development declined.</li><li>i can easily modify an existing data structure or implement a new custom data structure if needed</li></ul></li><li>search algorithms such as DFS and BFS is most useful for me.<ul><li>i can manage to implement so many logic using DFS if i can ignore the time complexity.</li><li>to constrast, i've had no chance to use algorithms regard to the number theory in app developement.</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="aws">AWS<a href="#aws" class="hash-link" aria-label="Direct link to AWS" title="Direct link to AWS">​</a></h3><ul><li>i was astonished by the number of services and configurability at first.<ul><li>examples in official docs are too few so i had to had so many trials and errors to deploy properly.</li><li>i knew that each service has the depth to experiment and configure options to optimize the perfomance.</li><li>but i could know the convinience of cloud service and the power of infrustructure as a code.  <ul><li>i implemented a web app backend in a template file.<ul><li>we can manage infrustructures in VCS</li><li>we can copy it and create the same another environment easily</li><li>we can deploy and delete it easily</li></ul></li></ul></li></ul></li><li>i didn't take exam for Certified Solution Architect finally.<ul><li>i want to use time for other things to learn and i feel that it's better to work actually rather than memorize details including possibly unnecessary knowledge</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="english">English<a href="#english" class="hash-link" aria-label="Direct link to English" title="Direct link to English">​</a></h3><ul><li><p>i've read about 20-30 books written in English this year.</p></li><li><p>i've bought Japanese books about math or programming no longer.</p><ul><li>i noticed that when there are things difficult to understand in English, they are also difficult in Japanese.</li><li>why it's difficult to understand them is not because the English texts are difficult, just because they themselves are complicated.</li><li>if the difference is little, it's better to read and learn about them in English because i can learn and practice English at the same time.</li></ul></li><li><p>my English skills are <em>reading</em> &gt;&gt; <em>writing</em> &gt; <em>listening</em> &gt; <em>speaking</em>.</p><ul><li><em>reading</em> was improved so much.<ul><li>i'm no longer in trouble when i read refarences or manuals in English.</li><li>vocabulary is still poor.<ul><li>there are so many words i can't read.</li><li>i can't understand jokes or parables.</li><li>i don't know about casual or daily English at all<ul><li>i'm now just specific to programming or math.</li></ul></li></ul></li></ul></li><li><em>writing</em><ul><li>writing is still slow but i feel it get to be better.</li><li>i became to be able to write documents about sysmtes or tools.</li><li>i can't write casual English.<ul><li>i can't chat by chat apps.</li></ul></li></ul></li><li><em>listening</em>, <em>speaking</em><ul><li>it's stil not good but improved by<ul><li>watching youtube videos, explaining programming launguages, frameworks, algorithms or so, with CC feature.</li><li>reading books aloud</li></ul></li></ul></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="what-next">What Next?<a href="#what-next" class="hash-link" aria-label="Direct link to What Next?" title="Direct link to What Next?">​</a></h2><ul><li>i want to implement a middle or large system</li><li>i want to make apps<ul><li>my blog<ul><li>i want this to be a platform to exhibit my implementations<ul><li>not only interesting but also entertainable or artistic</li></ul></li></ul></li><li>study app<ul><li>like <em>izanami jinja</em> i made before</li></ul></li></ul></li><li>i want to read<ul><li>Essentials of Programming Languages</li><li>Computer Organization and Design MIPS Edition: The Hardware/Software Interface</li><li>The Linux Philosophy</li><li>about computer network</li><li>about functional programming in practice</li><li>about software architecture</li><li>about system architecture</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202111]]></title>
            <link>https://e5pe0n.github.io/blog/2021/11/22/202111_Log</link>
            <guid>https://e5pe0n.github.io/blog/2021/11/22/202111_Log</guid>
            <pubDate>Mon, 22 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li>JavaScript: The Definitive Guide<ul><li>done</li></ul></li><li>AWS Certified Solution Architect STUDY GUIDE<ul><li>almost done</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="comments">Comments<a href="#comments" class="hash-link" aria-label="Direct link to Comments" title="Direct link to Comments">​</a></h2><p>i learned a lot of things in these three months.<br>
<!-- -->i really struggled to work them properly and i remberred importance of experiments and experimence; take your time, try the simplest case at first.  </p><ul><li>Back-end<ul><li>AWS<ul><li>CloudFront</li><li>CloudFormation</li><li>API Gateway</li><li>S3</li><li>DynamoDB</li><li>Lambda<ul><li>Lambda Layers</li></ul></li></ul></li><li>Python<ul><li>Pytest</li></ul></li></ul></li><li>Front-end<ul><li>JavaScript<ul><li>React</li><li>React Testing Library</li><li>Next.js</li><li>Mock Service Worker</li><li>Jest</li></ul></li><li>TypeScript</li></ul></li></ul><p>it was good to learn about JavaScript.<br>
<!-- -->it is easy to write code in JavaScript and JavaScript supports the functional programming style.<br>
<!-- -->i found that mastering full-stack skills is sooooooooooooo hard.<br>
<!-- -->i need to implement the both back-end and front-end, but i can use JavaScript to them.  </p><p>i found that it is difficult to use interpreter languages such as Python and JavaScript for productions because of maintainancibility.<br>
<!-- -->also i know that it is better to use popular languages for googlability and new people to team.<br>
<!-- -->TypeScript almost meets my requirements so it maybe good to replace Python with it.<br>
<!-- -->i wish to use a static typed language but there is no one i feel like good...</p><h2 class="anchor anchorWithStickyNavbar_O99L" id="what-nexts">What Nexts<a href="#what-nexts" class="hash-link" aria-label="Direct link to What Nexts" title="Direct link to What Nexts">​</a></h2><h3 class="anchor anchorWithStickyNavbar_O99L" id="work">Work<a href="#work" class="hash-link" aria-label="Direct link to Work" title="Direct link to Work">​</a></h3><ul><li>Infrastructure<ul><li>learn basics about network</li></ul></li><li>TypeScript<ul><li>basics: Programming TypeScript / Boris Cherny / O'Reilly</li><li>advanced: Effective TypeScript / Dan Vanderkam / O'Reiily</li></ul></li><li>React<ul><li>directory structure</li><li>component architecture</li><li>recipes: React Cookbook / David Griffiths, Dawn Griffiths / O'Reiily</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="hobby">Hobby<a href="#hobby" class="hash-link" aria-label="Direct link to Hobby" title="Direct link to Hobby">​</a></h3><ul><li>Programming Language<ul><li>Essentials of Programing Language / Daniel P. Friedman, Mitchell Wand / The MIT Press</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202109]]></title>
            <link>https://e5pe0n.github.io/blog/2021/09/14/202109_Log</link>
            <guid>https://e5pe0n.github.io/blog/2021/09/14/202109_Log</guid>
            <pubDate>Tue, 14 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li>Clean Architecture / Robert C. Martin / Addison-Wesley<ul><li>done</li><li>too abstract for me to grasp the written</li><li>I do not have a memory which is enough to remember such many acronyms of principles</li></ul></li><li>A First Course in Graph Theory / Gary Chartrand, Ping Zhang</li><li>The Go Programming Language / Alan A. A. Donovan, Brian W. Kernighan / ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES</li><li>The Scheme Programming Language (4th edition) / R. Kent Dybvig ( scheme.com/tspl4 )"</li><li>Database Internals / Alex Petrov / O'REILLY</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202107]]></title>
            <link>https://e5pe0n.github.io/blog/2021/07/15/202107_Log</link>
            <guid>https://e5pe0n.github.io/blog/2021/07/15/202107_Log</guid>
            <pubDate>Thu, 15 Jul 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li>Cracking the Coding Interview (6th Edition) / Gayle Laakmann McDowell<ul><li>All Done!!</li><li><a href="https://github.com/e5pe0n/algorithm-training/tree/master/cracking_the_coding_interview_6th" target="_blank" rel="noopener noreferrer">https://github.com/e5pe0n/algorithm-training/tree/master/cracking_the_coding_interview_6th</a></li></ul></li><li>A First Course in Graph Theory / Gary Chartrand, Ping Zhang</li><li>Hands-on Machine Learning with Sckit-Learn, Keras &amp; TensorFlow (2nd Edition) / O'REILLY / Geron<ul><li><a href="https://github.com/e5pe0n/hands-on-ML-work" target="_blank" rel="noopener noreferrer">https://github.com/e5pe0n/hands-on-ML-work</a></li><li>Almost all done!!</li></ul></li><li>AtCoder<ul><li>ABC</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202105-06]]></title>
            <link>https://e5pe0n.github.io/blog/2021/06/11/202106_Log</link>
            <guid>https://e5pe0n.github.io/blog/2021/06/11/202106_Log</guid>
            <pubDate>Fri, 11 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievement">Achievement<a href="#achievement" class="hash-link" aria-label="Direct link to Achievement" title="Direct link to Achievement">​</a></h2><ul><li>The C++ Programming Language (C++11) (4th Edition) / Bjarne Stroustrup<ul><li>Done</li></ul></li><li>Cracking the Coding Interview (6th Edition) / Gayle Laakmann McDowell</li><li>A First Course in Graph Theory / Gary Chartrand, Ping Zhang</li><li>Mathematics for Machine Learning / Marc Peter Deisenroth, A. Aldo Faisal, Cheng Soon Ong<ul><li>Done</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202103]]></title>
            <link>https://e5pe0n.github.io/blog/2021/03/18/202103_Log</link>
            <guid>https://e5pe0n.github.io/blog/2021/03/18/202103_Log</guid>
            <pubDate>Thu, 18 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Achivements]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achivements">Achivements<a href="#achivements" class="hash-link" aria-label="Direct link to Achivements" title="Direct link to Achivements">​</a></h2><ul><li>Introduction to the Theory of Computation<ul><li>0 Introduction - </li></ul></li><li>Friendly Introduction to Number Theory<ul><li>Chapter 15 - Chapter 18</li></ul></li><li>AtCoder: 851 -&gt; 939<ul><li>Joined<ul><li>ABC 194</li><li>ABC 195</li><li>ABC 196</li><li>ABC 197</li></ul></li><li>Solved<ul><li>Browns</li><li>Waterblues</li></ul></li></ul></li><li>Programming in Scala<ul><li>Readed<ul><li>too rich for me to master it, so I don't thnk I'll use Scala for now.  </li></ul></li></ul></li><li>Linux Inside<ul><li>Booting</li><li>Initialization</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>THE STARBEMS<ul><li>Sweet Nothing Blues</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202102]]></title>
            <link>https://e5pe0n.github.io/blog/2021/02/07/202102_log</link>
            <guid>https://e5pe0n.github.io/blog/2021/02/07/202102_log</guid>
            <pubDate>Sun, 07 Feb 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Achievements]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achievements">Achievements<a href="#achievements" class="hash-link" aria-label="Direct link to Achievements" title="Direct link to Achievements">​</a></h2><ul><li><p>"Programming in Haskell (Second Edition)" / Graham Hutton</p><ul><li>I learned many new perspective of programming.  <ul><li>lazy evaluation</li><li>induction by code to guarantee specifications and refactor implements</li></ul></li></ul></li><li><p>"Programming in Scala (Fourth Edition)" / artima / Martin Odersky, Lex Spoon, Bill Venners</p><ul><li>that for loop can be used with functional really helps me write code</li><li><em>trait</em>s is a strong implementation tool in term of scalability.<ul><li>but I worry about abusing traits makes our codes chaos such as awful C++ codes...</li></ul></li></ul></li><li><p>"A Friendly Introduction to Number Theory" / Joseph H. Silverman</p><ul><li>Chap. 4 -</li><li>I understood the mechanism of the Euclidean Algorithm (gcd) as last</li></ul></li><li><p>"情報科学における論理" / 日本評論社 / 小野寛晰</p><ul><li>Predicate Logic</li><li>Modal Logic</li></ul></li><li><p>"計算理論の基礎 (原著第 2 版)" / 共立出版 / Michael Sipser</p></li><li><p>AtCoder</p><ul><li>achived all AC about difficulty 800 - 1199 (185 problems)</li><li>rank up from Brown to Green (highest 831)</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202101]]></title>
            <link>https://e5pe0n.github.io/blog/2021/01/14/202101_log</link>
            <guid>https://e5pe0n.github.io/blog/2021/01/14/202101_log</guid>
            <pubDate>Thu, 14 Jan 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Achivement]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="achivement">Achivement<a href="#achivement" class="hash-link" aria-label="Direct link to Achivement" title="Direct link to Achivement">​</a></h2><ul><li><p>"りあクト！ TypeScript で始めるつらくない React 開発（第 3.1 版）【I. 言語・環境編】"</p></li><li><p>"りあクト！ TypeScript で始めるつらくない React 開発（第 3.1 版）【II. React 基礎編】"</p></li><li><p>"りあクト！ TypeScript で始めるつらくない React 開発（第 3.1 版）【III. React 応用編】" / 大岡 由佳</p></li><li><p>"体系的に学ぶ 安全な Web アプリケーションの作り方（第 2 版）" / 徳丸 浩</p></li><li><p>AtCoder Problems / BC4B / Hard 100 (2 nd)  </p><ul><li><a href="https://github.com/e5pe0n/algorithm-training/tree/master/AtCoder/ACP/BootCamp4b/Hard100_2" target="_blank" rel="noopener noreferrer">https://github.com/e5pe0n/algorithm-training/tree/master/AtCoder/ACP/BootCamp4b/Hard100_2</a></li></ul></li><li><p>"Programming in Haskell (2nd Edition)" / Grahm Hutton</p></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="りあクト">りあクト！<a href="#りあクト" class="hash-link" aria-label="Direct link to りあクト！" title="Direct link to りあクト！">​</a></h3><p>Original: <a href="https://github.com/oukayuka/Riakuto-StartingReact-ja3.1" target="_blank" rel="noopener noreferrer">https://github.com/oukayuka/Riakuto-StartingReact-ja3.1</a><br>
<a href="https://github.com/e5pe0n/rea-ct" target="_blank" rel="noopener noreferrer">https://github.com/e5pe0n/rea-ct</a></p><ul><li>very nice book</li><li>Learned history of front end </li><li>Learned grammer of JavaScript and TypeScript</li><li>Learned tools for JavaScript and TypeScript<ul><li>nodenv</li><li>node</li><li>yarn</li><li>create-react-app</li><li>tslint</li><li>stylelint</li><li>pritter</li></ul></li><li>Learned modern style of implementation in React<ul><li>FC, Hooks, Redux, React Query, Suspense, Concurrent</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="体系的に学ぶ-安全な-web-アプリケーションの作り方">体系的に学ぶ 安全な Web アプリケーションの作り方<a href="#体系的に学ぶ-安全な-web-アプリケーションの作り方" class="hash-link" aria-label="Direct link to 体系的に学ぶ 安全な Web アプリケーションの作り方" title="Direct link to 体系的に学ぶ 安全な Web アプリケーションの作り方">​</a></h3><ul><li>Good<ul><li>well organized</li></ul></li><li>Bad<ul><li>too monotonous</li><li>tools used in this book are old<ul><li>PHP, Perl</li></ul></li></ul></li><li>Learned basic valnerabilities and attacks, and measures against them</li></ul><h3 class="anchor anchorWithStickyNavbar_O99L" id="programming-in-haskell">Programming in Haskell<a href="#programming-in-haskell" class="hash-link" aria-label="Direct link to Programming in Haskell" title="Direct link to Programming in Haskell">​</a></h3><h4 class="anchor anchorWithStickyNavbar_O99L" id="about-this-book">About this book<a href="#about-this-book" class="hash-link" aria-label="Direct link to About this book" title="Direct link to About this book">​</a></h4><ul><li>Many examples of implementation</li><li>Detail of procedure to make recursive functions step by step</li></ul><h4 class="anchor anchorWithStickyNavbar_O99L" id="about-haskell">About Haskell<a href="#about-haskell" class="hash-link" aria-label="Direct link to About Haskell" title="Direct link to About Haskell">​</a></h4><ul><li>プログラムを読むことが式展開と同じ<ul><li>構文解析機みたい，シンタクティック</li></ul></li><li>命令型に比べて考えるべき場所が少ない<ul><li>命令型<ul><li>それぞれの変数の値，値の変わるタイミングに注意する必要がある<ul><li>配列のインデックスとそこの値とか</li></ul></li></ul></li><li>宣言型<ul><li>演繹的</li><li>式展開なのでとっ散らからない<ul><li>再帰関数を理解しやすい</li></ul></li><li>less bugs</li></ul></li></ul></li></ul><p>e.g. insertion sort in Haskell</p><div class="language-hs codeBlockContainer__11l theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_fxd6"><pre tabindex="0" class="prism-code language-hs codeBlock_Aumj thin-scrollbar"><code class="codeBlockLines_FJ9o"><span class="token-line" style="color:#393A34"><span class="token plain">insert :: Ord a =&gt; a -&gt; [a] -&gt; [a]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">insert x [] = [x]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">insert x (y:ys)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  | x &lt;= y = x:y:ys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  | otherwise = y:insert x ys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">isort :: Ord a =&gt; [a] -&gt; [a]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">isort [] = []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">isort (x:xs) = insert x (isort xs)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">isort [3, 2, 1, 4]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= insert 3 (insert 2 (insert 1 (insert 4 [])))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= insert 3 (insert 2 (insert 1 [4]))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= insert 3 (insert 2 [1, 4])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= insert 3 [1, 2, 4]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= [1, 2, 3, 4]</span><br></span></code></pre><div class="buttonGroup_vZty"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_hjbW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_eGsx"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_HNPu"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>クイックソートに感動</li></ul><div class="language-hs codeBlockContainer__11l theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_fxd6"><pre tabindex="0" class="prism-code language-hs codeBlock_Aumj thin-scrollbar"><code class="codeBlockLines_FJ9o"><span class="token-line" style="color:#393A34"><span class="token plain">qsort :: Ord a =&gt; [a] -&gt; [a]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">qsort [] = []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">qsort (x:xs) = qsort smaller ++ [x] ++ qsort larger</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  where </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    smaller = [a | a &lt;- xs, a &lt;= x]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    larger = [b | b &lt;- xs, b &gt; x]</span><br></span></code></pre><div class="buttonGroup_vZty"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_hjbW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_eGsx"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_HNPu"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>It's better to read curried functions without replacement with lambda expressions if you understood a notation of curried functions is syntactic sugar of lambda expressions<ul><li>consider the syntax of curried functions is default to define functions with multi args so you can get a partial applied function from any multi args function</li></ul></li></ul><div class="language-hs codeBlockContainer__11l theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_fxd6"><pre tabindex="0" class="prism-code language-hs codeBlock_Aumj thin-scrollbar"><code class="codeBlockLines_FJ9o"><span class="token-line" style="color:#393A34"><span class="token plain">add :: Int -&gt; Int -&gt; Int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add x y = x + y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-- means</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add :: Int -&gt; (Int -&gt; Int)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add = \x -&gt; (\y -&gt; x + y)</span><br></span></code></pre><div class="buttonGroup_vZty"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_hjbW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_eGsx"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_HNPu"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Type declarations and Data declarations are similar with ones of TypeScript</li></ul><div class="language-hs codeBlockContainer__11l theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_fxd6"><pre tabindex="0" class="prism-code language-hs codeBlock_Aumj thin-scrollbar"><code class="codeBlockLines_FJ9o"><span class="token-line" style="color:#393A34"><span class="token plain">-- Haskell</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data Bool = False | True</span><br></span></code></pre><div class="buttonGroup_vZty"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_hjbW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_eGsx"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_HNPu"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-ts codeBlockContainer__11l theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_fxd6"><pre tabindex="0" class="prism-code language-ts codeBlock_Aumj thin-scrollbar"><code class="codeBlockLines_FJ9o"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// TypeScript</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><br></span></code></pre><div class="buttonGroup_vZty"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_hjbW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_eGsx"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_HNPu"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Applicative and Monad<ul><li>Applicative is too complex to understand it and to use it without considering</li><li>I feel that Monad is useful a bit, but I cannot found how to use Applicative</li></ul></li><li>Reasoning<ul><li>induction is used to reason about recursive types or recursive functions</li><li>we can confirm if the logic of a function is correct</li></ul></li></ul><p>e.g.  </p><div class="language-hs codeBlockContainer__11l theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_fxd6"><pre tabindex="0" class="prism-code language-hs codeBlock_Aumj thin-scrollbar"><code class="codeBlockLines_FJ9o"><span class="token-line" style="color:#393A34"><span class="token plain">replicate :: Int -&gt; a -&gt; [a]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">replicate 0 _ = []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">replicate n x = x : replicate (n - 1) x</span><br></span></code></pre><div class="buttonGroup_vZty"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_hjbW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_eGsx"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_HNPu"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer__11l theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_fxd6"><pre tabindex="0" class="prism-code language-text codeBlock_Aumj thin-scrollbar"><code class="codeBlockLines_FJ9o"><span class="token-line" style="color:#393A34"><span class="token plain">-- Base case:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">length (replicate 0 x)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= { applying replicate }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">length []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= { applying length }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-- Inductive case:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">length (replicate (n + 1) x)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= { applying replicate }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">length (x : replicate n x)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= { applying length }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 + length (replicate n x)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= { induction hypothesis }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 + n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= { commutativity of + }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">n + 1</span><br></span></code></pre><div class="buttonGroup_vZty"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_hjbW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_eGsx"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_HNPu"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_O99L" id="music">Music<a href="#music" class="hash-link" aria-label="Direct link to Music" title="Direct link to Music">​</a></h2><ul><li>In Flames</li><li>Sithu Aye</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Log: 202011]]></title>
            <link>https://e5pe0n.github.io/blog/2020/11/29/202011_log</link>
            <guid>https://e5pe0n.github.io/blog/2020/11/29/202011_log</guid>
            <pubDate>Sun, 29 Nov 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[成果]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_O99L" id="成果">成果<a href="#成果" class="hash-link" aria-label="Direct link to 成果" title="Direct link to 成果">​</a></h2><ul><li>蟻本 Chapter 3 (p.127 ~ p.236)<ul><li>しゃくとり法 (Two pointers)</li><li>Segment tree</li><li>DP</li><li>Flow network</li><li>計算幾何</li></ul></li><li>AtCoder<ul><li>リアルタイム<ul><li>ABC 181 ~ 184</li><li>ARC 109</li><li>解けたのだいたい半分くらい</li><li>Rating: 390 (ギリ茶色いけず)</li><li>パフォーマンス: 617 ~ 1099 </li></ul></li><li>過去問<ul><li>ABC 171 ~ 180</li></ul></li></ul></li><li>数理基礎論講義 - 論理・集合・位相 - / 金子 晃 / サイエンス社<ul><li>読了</li></ul></li><li>現代数学入門 / 遠山 啓 / ちくま学芸文庫<ul><li>半分ちょい</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_O99L" id="感想とか">感想とか<a href="#感想とか" class="hash-link" aria-label="Direct link to 感想とか" title="Direct link to 感想とか">​</a></h2><ul><li>競プロ楽しい<ul><li>コード読むの速くなった，実装の語彙が増えた</li><li>ABC いっぱい解けた</li><li>DP にまだ慣れない</li><li>確率苦手．勉強し直せ</li></ul></li><li>数学楽しい</li></ul>]]></content:encoded>
        </item>
    </channel>
</rss>